# Copyright (C) Viktor Szakats
#
# SPDX-License-Identifier: curl

name: Windows

'on':
  push:
    branches:
      - master
      - '*/ci'
    paths-ignore:
      - '**/*.md'
      - '.circleci/**'
      - 'appveyor.*'
      - 'packages/**'
      - 'plan9/**'
      - 'projects/**'
      - 'winbuild/**'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '.circleci/**'
      - 'appveyor.*'
      - 'packages/**'
      - 'plan9/**'
      - 'projects/**'
      - 'winbuild/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions: {}

jobs:
  msvc:
    name: 'msvc, CM ${{ matrix.arch }}-${{ matrix.plat }} ${{ matrix.name }}'
    runs-on: windows-latest
    timeout-minutes: 55
    defaults:
      run:
        shell: bash
    env:
      VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'
      VCPKG_DISABLE_METRICS: '1'
    strategy:
      matrix:
        include:
          - name: 'gnutls no-zlib'
            install: 'brotli zlib zstd libpsl nghttp2 shiftmedia-libgnutls libssh pkgconf gsasl ngtcp2[gnutls] nghttp3'
            arch: 'x64'
            plat: 'windows'
            type: 'Debug'
            tflags: '~1516'
            # WARNING: libssh uses hard-coded world-writable paths (/etc/..., ~/.ssh/) to
            #          read its configuration from, making it vulnerable to attacks on
            #          Windows. Do not use this component till there is a fix for these.
            # https://github.com/curl/curl-for-win/blob/3951808deb04df9489ee17430f236ed54436f81a/libssh.sh#L6-L8
            config: '-DENABLE_DEBUG=ON -DENABLE_UNICODE=OFF -DCURL_USE_SCHANNEL=OFF -DCURL_BROTLI=ON -DCURL_ZSTD=ON -DBUILD_SHARED_LIBS=OFF -DCURL_USE_LIBSSH2=OFF -DCURL_USE_LIBSSH=ON -DCURL_USE_GNUTLS=ON -DCURL_USE_GSASL=ON -DUSE_NGTCP2=ON -DCURL_ZLIB=OFF'
          - name: 'gnutls yes-zlib'
            install: 'brotli zlib zstd libpsl nghttp2 shiftmedia-libgnutls libssh pkgconf gsasl ngtcp2[gnutls] nghttp3'
            arch: 'x64'
            plat: 'windows'
            type: 'Debug'
            tflags: '~1516'
            # WARNING: libssh uses hard-coded world-writable paths (/etc/..., ~/.ssh/) to
            #          read its configuration from, making it vulnerable to attacks on
            #          Windows. Do not use this component till there is a fix for these.
            # https://github.com/curl/curl-for-win/blob/3951808deb04df9489ee17430f236ed54436f81a/libssh.sh#L6-L8
            config: '-DENABLE_DEBUG=ON -DENABLE_UNICODE=OFF -DCURL_USE_SCHANNEL=OFF -DCURL_BROTLI=ON -DCURL_ZSTD=ON -DBUILD_SHARED_LIBS=OFF -DCURL_USE_LIBSSH2=OFF -DCURL_USE_LIBSSH=ON -DCURL_USE_GNUTLS=ON -DCURL_USE_GSASL=ON -DUSE_NGTCP2=ON'
      fail-fast: false
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: 'vcpkg cache setup'
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: 'vcpkg versions'
        timeout-minutes: 1
        run: |
          git -C "$VCPKG_INSTALLATION_ROOT" show --no-patch --format='%H %ai'
          vcpkg version

      - name: 'vcpkg build'
        timeout-minutes: 35
        run: vcpkg x-set-installed ${{ matrix.install }} '--triplet=${{ matrix.arch }}-${{ matrix.plat }}'

      - name: 'cmake configure'
        timeout-minutes: 5
        run: |
          if [[ '${{ matrix.install }}' = *'libressl'* ]]; then
            # without this, CMake gets confused by the non-vcpkg OpenSSL
            # installed on the runner and fails when linking.
            options+=" -DOPENSSL_ROOT_DIR=$VCPKG_INSTALLATION_ROOT/installed/${{ matrix.arch }}-${{ matrix.plat }}"
          fi
          cmake -B bld ${options} \
            "-DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake" \
            "-DVCPKG_INSTALLED_DIR=$VCPKG_INSTALLATION_ROOT/installed" \
            '-DVCPKG_TARGET_TRIPLET=${{ matrix.arch }}-${{ matrix.plat }}' \
            -DCMAKE_VS_GLOBALS=TrackFileAccess=false \
            '-DCMAKE_BUILD_TYPE=${{ matrix.type }}' \
            -DCMAKE_UNITY_BUILD=ON \
            -DCURL_WERROR=ON \
            -DENABLE_WEBSOCKETS=ON \
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG= \
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE= \
            ${{ matrix.config }} --trace-expand

      - name: 'cmake configure log'
        if: ${{ !cancelled() }}
        run: cat bld/CMakeFiles/CMake*.yaml 2>/dev/null || true

      - name: 'cmake configure cache'
        if: ${{ !cancelled() }}
        run: cat bld/CMakeCache.txt 2>/dev/null || true

      - name: 'curl_config.h'
        run: cat bld/lib/curl_config.h | grep -F '#define' | sort || true

      - name: 'curl_config.h (full)'
        run: cat bld/lib/curl_config.h || true

      - name: 'cmake build'
        timeout-minutes: 5
        run: cmake --build bld --config '${{ matrix.type }}' --verbose

      - name: 'curl version'
        timeout-minutes: 1
        run: |
          find . -name '*.exe' -o -name '*.dll' | grep -v '/examples/'
          if [ '${{ matrix.plat }}' != 'uwp' ]; then
            PATH="$PWD/bld/lib:$PATH"
            bld/src/curl.exe --disable --version
          fi
