# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# SPDX-License-Identifier: curl

name: ngtcp2 quictls

on:
  push:
    branches:
    - master
    - '*/ci'
    paths-ignore:
    - '**/*.md'
    - '**/CMakeLists.txt'
    - '.azure-pipelines.yml'
    - '.circleci/**'
    - '.cirrus.yml'
    - 'appveyor.yml'
    - 'CMake/**'
    - 'packages/**'
    - 'plan9/**'
    - 'projects/**'
    - 'winbuild/**'
  pull_request:
    branches:
    - master
    paths-ignore:
    - '**/*.md'
    - '**/CMakeLists.txt'
    - '.azure-pipelines.yml'
    - '.circleci/**'
    - '.cirrus.yml'
    - 'appveyor.yml'
    - 'CMake/**'
    - 'packages/**'
    - 'plan9/**'
    - 'projects/**'
    - 'winbuild/**'

concurrency:
  # Hardcoded workflow filename as workflow name above is just Linux again
  group: ngtcp2-openssl-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions: {}

env:
  MAKEFLAGS: -j 3

jobs:
  autotools:
    name: ${{ matrix.build.name }}
    runs-on: 'ubuntu-latest'
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        build:
        - name: quictls
          install: >-
            libpsl-dev libbrotli-dev libzstd-dev zlib1g-dev libev-dev libc-ares-dev
          openssl-version: 3.0.9+quic
          nghttp3-version: v0.13.0
          ngtcp2-version: v0.17.0
          nghttp2-version: v1.55.1
          configure: >-
            PKG_CONFIG_PATH="$HOME/nghttpx/lib/pkgconfig" LDFLAGS="-Wl,-rpath,$HOME/nghttpx/lib"
            --with-ngtcp2=$HOME/nghttpx --enable-warnings --enable-werror --enable-debug
            --with-test-nghttpx="$HOME/nghttpx/bin/nghttpx"

    steps:
    - run: |
        sudo apt-get update
        sudo apt-get install libtool autoconf automake pkg-config stunnel4 ${{ matrix.build.install }}
        sudo apt-get install apache2 apache2-dev
      name: 'install prereqs and impacket, pytest, crypto'

    - name: cache nghttpx
      uses: actions/cache@v3
      id: cache-nghttpx
      env:
        cache-name: cache-nghttpx
      with:
        path: /home/runner/nghttpx
        key: ${{ runner.os }}-build-${{ env.cache-name }}-openssl-${{ matrix.build.openssl-version }}-nghttp3-${{ matrix.build.nghttp3-version }}-ngtcp2-${{ matrix.build.ngtcp2-version }}-nghttp2-${{ matrix.build.nghttp2-version }}

    - if: steps.cache-nghttpx.outputs.cache-hit != 'true'
      run: |
        git clone --quiet --depth=1 -b openssl-${{ matrix.build.openssl-version }} https://github.com/quictls/openssl
        cd openssl
        ./config --prefix=$HOME/nghttpx --libdir=$HOME/nghttpx/lib
        make -j1 install_sw
      name: 'install quictls'

    - if: steps.cache-nghttpx.outputs.cache-hit != 'true'
      run: |
        git clone --quiet --depth=1 -b ${{ matrix.build.nghttp3-version }} https://github.com/ngtcp2/nghttp3
        cd nghttp3
        autoreconf -fi
        ./configure --prefix=$HOME/nghttpx PKG_CONFIG_PATH="$HOME/nghttpx/lib/pkgconfig" --enable-lib-only
        make install
      name: 'install nghttp3'

    - if: steps.cache-nghttpx.outputs.cache-hit != 'true'
      run: |
        git clone --quiet --depth=1 -b ${{ matrix.build.ngtcp2-version }} https://github.com/ngtcp2/ngtcp2
        cd ngtcp2
        autoreconf -fi
        ./configure --prefix=$HOME/nghttpx PKG_CONFIG_PATH="$HOME/nghttpx/lib/pkgconfig" --enable-lib-only --with-openssl
        make install
      name: 'install ngtcp2'

    - if: steps.cache-nghttpx.outputs.cache-hit != 'true'
      run: |
        git clone --quiet --depth=1 -b ${{ matrix.build.nghttp2-version }} https://github.com/nghttp2/nghttp2
        cd nghttp2
        autoreconf -fi
        ./configure --prefix=$HOME/nghttpx PKG_CONFIG_PATH="$HOME/nghttpx/lib/pkgconfig" --enable-http3
        make install
      name: 'install nghttp2'

    - run: |
        git clone --quiet --depth=1 -b master https://github.com/icing/mod_h2
        cd mod_h2
        autoreconf -fi
        ./configure
        make
        sudo make install
      name: 'install mod_h2'

    - uses: actions/checkout@v3

    - run: |
        sudo python3 -m pip install -r tests/requirements.txt -r tests/http/requirements.txt
      name: 'install python test prereqs'

    - run: autoreconf -fi
      name: 'autoreconf'

    - run: ./configure --with-openssl=$HOME/nghttpx ${{ matrix.build.configure }}
      name: 'configure'

    - run: make V=1
      name: 'make'

    - run: make V=1 examples
      name: 'make examples'

    - run: make V=1 -C tests
      name: 'make tests'

    - run: make V=1 test-ci
      name: 'run tests'
      env:
        TFLAGS: "${{ matrix.build.tflags }}"

    - run: pytest -v
      name: 'run pytest'
      env:
        TFLAGS: "${{ matrix.build.tflags }}"
