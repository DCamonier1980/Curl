# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# SPDX-License-Identifier: curl

name: macOS

on:
  push:
    branches:
      - master
      - '*/ci'
    paths-ignore:
      - '**/*.md'
      - '.azure-pipelines.yml'
      - '.circleci/**'
      - '.cirrus.yml'
      - 'appveyor.*'
      - 'packages/**'
      - 'plan9/**'
      - 'projects/**'
      - 'winbuild/**'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '.azure-pipelines.yml'
      - '.circleci/**'
      - '.cirrus.yml'
      - 'appveyor.*'
      - 'packages/**'
      - 'plan9/**'
      - 'projects/**'
      - 'winbuild/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions: {}

env:
  LDFLAGS: -w  # suppress 'object file was built for newer macOS version than being linked' warnings
  MAKEFLAGS: -j 4

jobs:
  autotools:
    name: 'AM ${{ matrix.compiler }} ${{ matrix.name }}'
    runs-on: 'macos-latest'
    timeout-minutes: 60
    env:
      DEVELOPER_DIR: /Applications/Xcode${{ matrix.xcode && format('_{0}', matrix.xcode) || '' }}.app/Contents/Developer
      CC: ${{ matrix.compiler }}
      CFLAGS: '-mmacosx-version-min=${{ matrix.macos-version-min }}'
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: no-ssl non-debug
            compiler: clang
            install: nghttp2
            configure: --without-ssl --enable-websockets
            macos-version-min: 10.9  # Mavericks (2013)
          - name: no-ssl non-debug
            compiler: gcc-12
            install: nghttp2
            configure: --without-ssl --enable-websockets
            macos-version-min: 10.9
            tflags: ~RTSP ~1156 ~1539
          - name: no-ssl
            compiler: clang
            install: nghttp2
            configure: --enable-debug --without-ssl --enable-websockets
            macos-version-min: 10.9
          - name: libssh2
            compiler: clang
            install: nghttp2 libssh2
            configure: --enable-debug --with-libssh2=$(brew --prefix)/opt/libssh2 --without-ssl --enable-websockets
            macos-version-min: 10.9
          - name: libssh c-ares
            compiler: clang
            install: nghttp2 openssl libssh
            configure: --enable-debug --with-libssh --with-openssl=$(brew --prefix)/opt/openssl --enable-ares --enable-websockets
            macos-version-min: 10.9
          - name: libssh
            compiler: clang
            install: nghttp2 openssl libssh
            configure: --enable-debug --with-libssh --with-openssl=$(brew --prefix)/opt/openssl --enable-websockets
            macos-version-min: 10.9
          - name: c-ares
            compiler: clang
            install: nghttp2
            configure: --enable-debug --enable-ares --without-ssl --enable-websockets
            macos-version-min: 10.9
          - name: HTTP-only
            compiler: clang
            configure: |
              --enable-debug \
              --disable-alt-svc \
              --disable-dict \
              --disable-file \
              --disable-ftp \
              --disable-gopher \
              --disable-imap \
              --disable-ldap \
              --disable-pop3 \
              --disable-rtmp \
              --disable-rtsp \
              --disable-scp \
              --disable-sftp \
              --disable-shared \
              --disable-smb \
              --disable-smtp \
              --disable-telnet \
              --disable-tftp \
              --disable-unix-sockets \
              --without-brotli \
              --without-gssapi \
              --without-libidn2 \
              --without-libpsl \
              --without-librtmp \
              --without-libssh2 \
              --without-nghttp2 \
              --without-ntlm-auth \
              --without-ssl \
              --without-zlib \
              --without-zstd

            macos-version-min: 10.15  # Catalina (2019)
          - name: SecureTransport
            compiler: clang
            install: nghttp2
            configure: --enable-debug --with-secure-transport --enable-websockets
            macos-version-min: 10.8  # Mountain Lion (2012)
          # Fails compiling macOS Framework headers in most gcc + SDK combinations
          # (except gcc-11).
          # Fails linking tests due to not linking SystemConfiguration framework,
          # because detection fails in CURL_DARWIN_SYSTEMCONFIGURATION due to an
          # error compiling TargetConditionals.h SDK header that affects gcc-11
          # + SDK 14.4, 14.5 (Xcode 15.3, 15.4).
          - name: SecureTransport
            compiler: gcc-11
            configure: --enable-debug --with-secure-transport --enable-websockets
            macos-version-min: 10.15  # Catalina (2019) the lastest release where SecureTransport is not deprecated
            xcode: 15.2  # for SDK 14.2, to avoid SystemConfiguration detection bug
            tflags: ~RTSP ~1156 ~1539 ~2100
          - name: LibreSSL
            compiler: clang
            install: nghttp2 libressl
            configure: --enable-debug --with-openssl=$(brew --prefix)/opt/libressl --enable-websockets
            macos-version-min: 10.9
          - name: OpenSSL
            compiler: clang
            install: nghttp2 openssl
            configure: --enable-debug --with-openssl=$(brew --prefix)/opt/openssl --enable-websockets
            macos-version-min: 10.9
          - name: OpenSSL torture no-FTP
            compiler: clang
            install: nghttp2 openssl
            configure: --enable-debug --disable-shared --disable-threaded-resolver --with-openssl=$(brew --prefix)/opt/openssl --enable-websockets
            tflags: -n -t --shallow=25 !FTP
            macos-version-min: 10.9
          - name: OpenSSL torture FTP
            compiler: clang
            install: nghttp2 openssl
            configure: --enable-debug --disable-shared --disable-threaded-resolver --with-openssl=$(brew --prefix)/opt/openssl --enable-websockets
            tflags: -n -t --shallow=20 FTP
            macos-version-min: 10.9
          - name: OpenSSL libssh2 (macOS 10.15)
            compiler: clang
            install: nghttp2 openssl libssh2
            configure: --enable-debug --disable-ldap --with-openssl=$(brew --prefix)/opt/openssl --enable-websockets
            macos-version-min: 10.15
    steps:
      - name: 'brew install'
        # Run this command with retries because of spurious failures seen
        # while running the tests, for example
        # https://github.com/curl/curl/runs/4095721123?check_suite_focus=true
        run: |
          echo libtool autoconf automake pkg-config libpsl ${{ matrix.install }} | xargs -Ix -n1 echo brew '"x"' > /tmp/Brewfile
          while [[ $? == 0 ]]; do for i in 1 2 3; do brew update && brew bundle install --no-lock --file /tmp/Brewfile && break 2 || { echo Error: wait to try again; sleep 10; } done; false Too many retries; done

      - name: 'brew unlink openssl'
        run: |
          case "${{ matrix.install }}" in
            *openssl*)
              (
                cd $(brew --prefix)/opt/openssl/lib/pkgconfig/
                for i in libssl.pc libcrypto.pc; do
                  sudo cp $i $i.orig
                  sudo sed s,libdir=$(brew --prefix)'/Cellar/openssl@3/3.3.0$',libdir=$(brew --prefix)/Cellar/openssl@3/3.3.0/lib,g < $i.orig > /tmp/$i
                  sudo cp /tmp/$i $i
                  cat $i
                done
              )
              ;;
            *)
              if test -d $(brew --prefix)/include/openssl; then
                brew unlink openssl
              fi;;
          esac

      - name: 'pip3 install'
        run: |
          python3 -m venv $HOME/venv
          source $HOME/venv/bin/activate
          python3 -m pip install impacket

      - name: 'remove $HOME/.curlrc'
        run: rm -f $HOME/.curlrc

      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: 'toolchain versions'
        run: |
          which "${CC}"; "${CC}" --version
          xcodebuild -version || true
          xcrun -sdk macosx --show-sdk-path 2>/dev/null || true

      - name: 'autoreconf'
        run: autoreconf -fi

      - name: 'configure'
        run: |
          if [ '${{ matrix.compiler }}' != 'clang' ]; then
            options+=" --with-sysroot=$(xcrun -sdk macosx --show-sdk-path 2>/dev/null)"
            CFLAGS+=" --sysroot=$(xcrun -sdk macosx --show-sdk-path 2>/dev/null)"
          fi
          mkdir bld && cd bld && ../configure --enable-warnings --enable-werror \
            --disable-dependency-tracking \
            ${{ matrix.configure }} ${options}

      - name: 'configure log'
        if: ${{ !cancelled() }}
        run: cat bld/config.log || true

      - name: 'curl_config.h'
        run: cat bld/lib/curl_config.h | grep -F '#define' | sort || true

      - name: 'curl_config.h (full)'
        run: cat bld/lib/curl_config.h || true

      - name: 'make'
        run: make -C bld V=1

      - name: 'curl version'
        run: bld/src/curl --disable --version

      - name: 'make examples'
        run: make -C bld V=1 examples

      - name: 'make tests'
        run: make -C bld V=1 -C tests

      - name: 'run tests'
        env:
          TFLAGS: '${{ matrix.tflags }} -j5 ~1452'
        run: make -C bld V=1 test-ci

  cmake:
    name: 'CM ${{ matrix.compiler }} ${{ matrix.build.name }}'
    runs-on: 'macos-latest'
    timeout-minutes: 10
    env:
      DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
      CC: ${{ matrix.compiler }}
      CFLAGS: '-Wno-deprecated-declarations'  # Required for LDAP
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang, gcc-12]
        build:
          - name: OpenSSL
            install: nghttp2 openssl gsasl
            generate: -DOPENSSL_ROOT_DIR=$(brew --prefix)/opt/openssl -DCURL_USE_GSASL=ON
          - name: LibreSSL
            install: nghttp2 libressl
            generate: -DOPENSSL_ROOT_DIR=$(brew --prefix)/opt/libressl -DCURL_DISABLE_LDAP=ON -DCURL_DISABLE_LDAPS=ON -DBUILD_EXAMPLES=ON
          - name: wolfSSL
            install: nghttp2 wolfssl
            generate: -DCURL_USE_WOLFSSL=ON -DCURL_DISABLE_LDAP=ON -DCURL_DISABLE_LDAPS=ON
          - name: libssh2
            install: nghttp2 openssl libssh2
            generate: -DOPENSSL_ROOT_DIR=$(brew --prefix)/opt/openssl -DCURL_USE_LIBSSH2=ON -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=ON
          - name: GnuTLS
            install: gnutls
            generate: -DCURL_USE_GNUTLS=ON -DCURL_USE_OPENSSL=OFF -DCURL_DISABLE_LDAP=ON -DCURL_DISABLE_LDAPS=ON -DCMAKE_SHARED_LINKER_FLAGS=-L$(brew --prefix)/lib -DCMAKE_EXE_LINKER_FLAGS=-L$(brew --prefix)/lib
    steps:
      - name: 'brew install'
        run: |
          echo libtool autoconf automake pkg-config ${{ matrix.build.install }} | xargs -Ix -n1 echo brew '"x"' > /tmp/Brewfile
          while [[ $? == 0 ]]; do for i in 1 2 3; do brew update && brew bundle install --no-lock --file /tmp/Brewfile && break 2 || { echo Error: wait to try again; sleep 10; } done; false Too many retries; done

      - name: 'brew unlink openssl'
        run: |
          case "${{ matrix.build.install }}" in
            *openssl*)
              ;;
            *)
              if test -d $(brew --prefix)/include/openssl; then
                brew unlink openssl
              fi;;
          esac

      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: 'toolchain versions'
        run: |
          which "${CC}"; "${CC}" --version
          xcodebuild -version || true
          xcrun -sdk macosx --show-sdk-path 2>/dev/null || true

      - name: 'cmake configure'
        run: |
          cmake -B bld -DCMAKE_UNITY_BUILD=ON -DCURL_WERROR=ON \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
            -DUSE_APPLE_IDN=ON \
            ${{ matrix.build.generate }}

      - name: 'configure log'
        if: ${{ !cancelled() }}
        run: cat bld/CMakeFiles/CMakeConfigureLog.yaml 2>/dev/null || true

      - name: 'curl_config.h'
        run: cat bld/lib/curl_config.h | grep -F '#define' | sort || true

      - name: 'curl_config.h (full)'
        run: cat bld/lib/curl_config.h || true

      - name: 'cmake build'
        run: cmake --build bld --parallel 4

      - name: 'curl version'
        run: bld/src/curl --disable --version

  combinations:
    if: true  # Set to `true` to enable this test matrix of ~126 jobs. It runs fairly quickly.
    name: "${{ matrix.build == 'cmake' && 'CM' || 'AM' }} ${{ matrix.compiler }} ${{ matrix.image }} ${{ matrix.xcode }} ${{ matrix.config }}"
    runs-on: ${{ matrix.image }}
    timeout-minutes: 30
    env:
      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer
      CC: ${{ matrix.compiler }}
      CFLAGS: '-Wno-deprecated-declarations'  # Required for LDAP
    strategy:
      fail-fast: false
      matrix:
        config: [OpenSSL, SecureTransport]
        compiler: [gcc-11, gcc-12, gcc-13, gcc-14, llvm, clang]
        # Xcode support matrix as of 2024-07, with default macOS SDK versions and OS names, years:
        # macos-12: 13.1, 13.2.1, 13.3.1, 13.4.1, 14.0.1, 14.1, 14.2
        # macos-13:                                       14.1, 14.2, 14.3.1, 15.0.1, 15.1, 15.2
        # macos-14:                                                   14.3.1, 15.0.1, 15.1, 15.2, 15.3, 15.4, 16.0
        # macOSSDK: 12.0, 12.1,   12.3,   12.3,   12.3,   13.0, 13.1, 13.3,   14.0,   14.2, 14.2, 14.4, 14.5, 15.0
        #           Monterey (2021)                       Ventura (2022)      Sonoma (2023)                   Sequoia (2024)
        # https://github.com/actions/runner-images/tree/main/images/macos
        # https://en.wikipedia.org/wiki/MacOS_version_history
        image: [macos-12, macos-13, macos-14]
        # '16.0' seems to be missing the type `FILE`:
        #   https://github.com/curl/curl/actions/runs/9807338718/job/27080925597#step:5:22
        # '15.1' has the same default macOS SDK as '15.2' and identical test results, so skip it.
        # '14.0.1' has the same default macOS SDK as '13.4.1' and identical test results, so skip it.
        # '14.2', '15.0.1', '15.4' but not revealing new fallouts, skip it to reduce jobs.
        xcode: ['13.4.1', '14.1', '14.3.1', '15.2', '15.3']
        macos-version-min: ['10.9']
        build: [cmake, autotools]
        exclude:
          # Unsupported combinations:
          - { image: macos-12, xcode: '14.3.1' }
          - { image: macos-12, xcode: '15.0.1' }
          - { image: macos-12, xcode: '15.1'   }
          - { image: macos-12, xcode: '15.2'   }
          - { image: macos-12, xcode: '15.3'   }
          - { image: macos-12, xcode: '15.4'   }
          - { image: macos-12, xcode: '16.0'   }
          - { image: macos-13, xcode: '13.4.1' }
          - { image: macos-13, xcode: '14.0.1' }
          - { image: macos-13, xcode: '15.3'   }
          - { image: macos-13, xcode: '15.4'   }
          - { image: macos-13, xcode: '16.0'   }
          - { image: macos-14, xcode: '13.4.1' }
          - { image: macos-14, xcode: '14.0.1' }
          - { image: macos-14, xcode: '14.1'   }
          - { image: macos-14, xcode: '14.2'   }
          # Exclude failing combinations. Comment these lines to observe all details.
          # misc reasons:
          - { compiler: gcc-11, image: macos-14, xcode: '14.3.1', config: OpenSSL }          # error: two or more data types in declaration specifiers # fatal error: AvailabilityInternalLegacy.h: No such file or directory
          - { compiler: gcc-11, image: macos-14, xcode: '15.3'  , build: autotools }         # SystemConfiguration framework detection fails due to: error: missing binary operator before token "("
          - { compiler: gcc-11, image: macos-14, xcode: '15.4'  , build: autotools }         # SystemConfiguration framework detection fails due to: error: missing binary operator before token "("
          - { compiler: gcc-13, image: macos-12, xcode: '14.1'  , config: OpenSSL }          # error: two or more data types in declaration specifiers # ...
          - { compiler: gcc-13, image: macos-12, xcode: '14.2'  , config: OpenSSL }          # error: two or more data types in declaration specifiers # ...
          - { compiler: gcc-13, image: macos-13, xcode: '15.0.1', config: OpenSSL }          # error: two or more data types in declaration specifiers # ...
          - { compiler: gcc-13, image: macos-13, xcode: '15.1'  , config: OpenSSL }          # error: two or more data types in declaration specifiers # ...
          - { compiler: gcc-13, image: macos-13, xcode: '15.2'  , config: OpenSSL }          # error: two or more data types in declaration specifiers # ...
          - { compiler: gcc-13, image: macos-14, xcode: '14.3.1', config: OpenSSL }          # error: two or more data types in declaration specifiers # fatal error: AvailabilityInternalLegacy.h: No such file or directory
          - { compiler: gcc-13, image: macos-14, xcode: '15.0.1', config: OpenSSL }          # error: two or more data types in declaration specifiers # ...
          - { compiler: gcc-13, image: macos-14, xcode: '15.1'  , config: OpenSSL }          # error: two or more data types in declaration specifiers # ...
          - { compiler: gcc-13, image: macos-14, xcode: '15.2'  , config: OpenSSL }          # error: two or more data types in declaration specifiers # ...
          - { compiler: gcc-11, image: macos-12, xcode: '14.1'  , config: SecureTransport }  # error: expected ';' before 'extern'
          - { compiler: gcc-11, image: macos-12, xcode: '14.2'  , config: SecureTransport }  # error: expected ';' before 'extern'
          - { compiler: gcc-11, image: macos-13, xcode: '15.0.1', config: SecureTransport }  # error: unknown type name 'dispatch_queue_t'; did you mean 'dispatch_time_t'?
          - { compiler: gcc-11, image: macos-13, xcode: '15.2'  , config: SecureTransport }  # error: unknown type name 'dispatch_queue_t'; did you mean 'dispatch_time_t'?
          - { compiler: gcc-11, image: macos-14, xcode: '14.3.1', config: SecureTransport }  # error: two or more data types in declaration specifiers # fatal error: AvailabilityInternalLegacy.h: No such file or directory
          # gcc + SecureTransport incompatibility
          - { compiler: gcc-12,                                   config: SecureTransport }  # error: attributes should be specified before the declarator in a function definition | # ...
          - { compiler: gcc-13,                                   config: SecureTransport }  # error: attributes should be specified before the declarator in a function definition | # ...
          - { compiler: gcc-14,                                   config: SecureTransport }  # error: attributes should be specified before the declarator in a function definition | # ...
          # llvm v15 + SecureTransport incompatibility
          #   error: use of undeclared identifier 'noErr' / 'SecCertificateCopyLongDescription' / 'SecItemImportExportKeyParameters' / 'SecExternalFormat' / 'SecExternalItemType' / 'SEC_KEY_IMPORT_EXPORT_PARAMS_VERSION'
          - { compiler: llvm  , image: macos-14, xcode: '15.3'  , config: SecureTransport }
          - { compiler: llvm  , image: macos-14, xcode: '15.4'  , config: SecureTransport }
    steps:
      - name: 'install autotools'
        if: ${{ matrix.build == 'autotools' }}
        run: |
          echo autoconf automake libtool | xargs -Ix -n1 echo brew '"x"' > /tmp/Brewfile
          while [[ $? == 0 ]]; do for i in 1 2 3; do brew update && brew bundle install --no-lock --file /tmp/Brewfile && break 2 || { echo Error: wait to try again; sleep 10; } done; false Too many retries; done

      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: 'toolchain versions'
        run: |
          [ '${{ matrix.compiler }}' = 'llvm' ] && CC="$(brew --prefix llvm@15)/bin/clang"
          which "${CC}"; "${CC}" --version
          xcodebuild -version || true
          xcrun -sdk macosx --show-sdk-path 2>/dev/null || true

      - name: 'autoreconf'
        if: ${{ matrix.build == 'autotools' }}
        run: autoreconf -fi

      - name: 'configure / ${{ matrix.build }}'
        run: |
          [ '${{ matrix.compiler }}' = 'llvm' ] && CC="$(brew --prefix llvm@15)/bin/clang"
          if [ '${{ matrix.build }}' = 'autotools' ]; then
            if [ '${{ matrix.compiler }}' = 'llvm' ]; then
              options+=" --target=$(uname -m)-apple-darwin"
              CC+=" --target=$(uname -m)-apple-darwin"
            fi
            if [ '${{ matrix.compiler }}' != 'clang' ]; then
              options+=" --with-sysroot=$(xcrun -sdk macosx --show-sdk-path 2>/dev/null)"
              CFLAGS+=" --sysroot=$(xcrun -sdk macosx --show-sdk-path 2>/dev/null)"
            fi
            [ '${{ matrix.config }}' = 'OpenSSL' ]         && options+=" --with-openssl=$(brew --prefix)/opt/openssl"
            [ '${{ matrix.config }}' = 'SecureTransport' ] && options+=' --with-secure-transport'
            CFLAGS+=' -mmacosx-version-min=${{ matrix.macos-version-min }}'
            # picks up nghttp2 and libidn2
            mkdir bld && cd bld && ../configure --enable-warnings --enable-werror \
              --disable-dependency-tracking \
              --disable-docs --disable-manual \
              --without-nghttp2 --without-libidn2 \
              "--with-libssh2=$(brew --prefix)/opt/libssh2" \
              ${options}
          else
            [ '${{ matrix.config }}' = 'OpenSSL' ]         && options+=' -DCURL_USE_OPENSSL=ON'
            [ '${{ matrix.config }}' = 'SecureTransport' ] && options+=' -DCURL_USE_SECTRANSP=ON'
            # picks up libssh2
            cmake -B bld -DCMAKE_UNITY_BUILD=ON -DCURL_WERROR=ON \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.macos-version-min }} \
              "-DCMAKE_C_COMPILER_TARGET=$(uname -m)-apple-darwin$(uname -r)" \
              -DBUILD_LIBCURL_DOCS=OFF -DBUILD_MISC_DOCS=OFF -DENABLE_CURL_MANUAL=OFF \
              -DUSE_APPLE_IDN=OFF \
              ${options}
          fi

      - name: 'configure log'
        if: ${{ !cancelled() }}
        run: cat bld/config.log bld/CMakeFiles/CMakeConfigureLog.yaml 2>/dev/null || true

      - name: 'curl_config.h'
        run: cat bld/lib/curl_config.h | grep -F '#define' | sort || true

      - name: 'curl_config.h (full)'
        run: cat bld/lib/curl_config.h || true

      - name: 'build / ${{ matrix.build }}'
        run: make -C bld V=1 VERBOSE=1

      - name: 'curl version'
        run: bld/src/curl --disable --version
