# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# SPDX-License-Identifier: curl

name: alpine-x86-v2

on:
  push:
    branches:
    - master
    - '*/ci'
    paths-ignore:
    - '**/*.md'
    - '**/CMakeLists.txt'
    - '.azure-pipelines.yml'
    - '.circleci/**'
    - '.cirrus.yml'
    - 'appveyor.yml'
    - 'CMake/**'
    - 'packages/**'
    - 'plan9/**'
    - 'projects/**'
    - 'winbuild/**'
  pull_request:
    branches:
    - master
    paths-ignore:
    - '**/*.md'
    - '**/CMakeLists.txt'
    - '.azure-pipelines.yml'
    - '.circleci/**'
    - '.cirrus.yml'
    - 'appveyor.yml'
    - 'CMake/**'
    - 'packages/**'
    - 'plan9/**'
    - 'projects/**'
    - 'winbuild/**'

concurrency:
  # Hardcoded workflow filename as workflow name above is just Linux again
  group: alpine-x86-v2-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions: {}

env:
  MAKEFLAGS: -j 3
  openssl-version: 3.0.10+quic
  nghttp3-version: v0.14.0
  ngtcp2-version: v0.18.0
  nghttp2-version: v1.55.1
  gnutls-version: 3.8.0
  wolfssl-version: v5.6.3-stable
  mod_h2-version: v2.0.21

jobs:
  autotools:
    name: ${{ matrix.build.name }}
    runs-on: 'ubuntu-latest'
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        build:
        - name: quictls
          configure: >-
            PKG_CONFIG_PATH="$HOME/nghttpx/lib/pkgconfig" LDFLAGS="-Wl,-rpath,$HOME/nghttpx/lib"
            --with-ngtcp2=$HOME/nghttpx --enable-warnings --enable-werror --enable-debug
            --with-test-nghttpx="$HOME/nghttpx/bin/nghttpx"
            --with-openssl=$HOME/nghttpx

    steps:
      - uses: actions/checkout@v2

      - name: Setup latest Alpine Linux
        uses: jirutka/setup-alpine@v1
        with:
          arch: i386
          packages: >
            build-base
            libgit2-dev
            gcc

      - name: Run script inside Alpine chroot as root
        run: |
          cat /etc/alpine-release
          uname -a
          apk add libtool autoconf automake
        shell: alpine.sh --root {0}

      - name: Run script inside Alpine chroot as the default user (unprivileged)
        run: |
          ls -la  # as you would expect, you're in your workspace directory
        shell: alpine.sh {0}
