#***************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: curl
#
###########################################################################

# https://ci.appveyor.com/project/curlorg/curl/history
# AppVeyor configuration:
#   https://www.appveyor.com/docs/appveyor-yml/
# AppVeyor worker images:
#   https://www.appveyor.com/docs/windows-images-software/

version: 7.50.0.{build}

environment:
  UNITY: 'OFF'
  OPENSSL: 'OFF'
  DEBUG: 'ON'
  SHARED: 'OFF'
  matrix:
    # autotools-based builds (NOT mingw cross-compiling, but msys2 native)
    - job_name: 'autotools, msys2, Debug, x86_64, no SSL'
      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2017'
      BUILD_SYSTEM: autotools
      TESTING: 'ON'
      DISABLED_TESTS: '!19 !504 !704 !705 !1233'
      ADD_PATH: 'C:\msys64\usr\bin'
      CONFIG_ARGS: '--enable-debug --enable-werror --disable-threaded-resolver --with-openssl --enable-websockets'

install:
  - ps: |
      if($env:ADD_PATH -ne $null) {
        $env:PATH = "$env:ADD_PATH;$env:PATH"
      }

build_script:
  - ps: |
      function Pull-BatchFile-Env {
        param([string]$Path, [string]$Parameters)
        $tempFile = [IO.Path]::GetTempFileName()
        cmd.exe /c " `"$Path`" $Parameters && set " > $tempFile
        Get-Content $tempFile | ForEach-Object { if($_ -match '^(.*?)=(.*)$') { Set-Content "env:\$($matches[1])" $matches[2] } }
        Remove-Item $tempFile
      }

      $ErrorActionPreference = 'Stop'

      if($env:APPVEYOR_BUILD_WORKER_IMAGE -eq 'Visual Studio 2022') {
        $openssl_root = 'C:\OpenSSL-v30-Win64'
      }
      else {
        $openssl_root = 'C:\OpenSSL-v111-Win64'
      }

      if($env:BUILD_SYSTEM -eq 'CMake') {

        $options = @('-DCURL_WERROR=ON')
        $options += "-G$env:PRJ_GEN"
        if($env:TARGET -ne $null) {
          $options += "$env:TARGET"
          if($env:TARGET.Contains('ARM64')) {
            $env:SKIP_RUN = 'ARM64 architecture'
          }
        }
        $options += "-DCURL_USE_OPENSSL=$env:OPENSSL"
        if($env:OPENSSL -eq 'ON') {
          $options += "-DOPENSSL_ROOT_DIR=$openssl_root"
        }
        $options += "-DCURL_USE_SCHANNEL=$env:SCHANNEL"
        $options += "-DHTTP_ONLY=$env:HTTP_ONLY"
        $options += "-DBUILD_SHARED_LIBS=$env:SHARED"
        $options += "-DBUILD_TESTING=$env:TESTING"
        $options += "-DENABLE_WEBSOCKETS=$env:WEBSOCKETS"
        $options += "-DCMAKE_UNITY_BUILD=$env:UNITY"
        $options += "-DENABLE_DEBUG=$env:DEBUG"
        $options += "-DENABLE_UNICODE=$env:ENABLE_UNICODE"
        $options += '-DCMAKE_INSTALL_PREFIX=C:/CURL'
        $options += "-DCMAKE_BUILD_TYPE=$env:PRJ_CFG"
        if($env:PRJ_CFG -eq 'Debug') {
          $options += '-DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG='
        }
        elseif ($env:PRJ_CFG -eq 'Release') {
          $options += '-DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE='
        }
        if($env:PRJ_GEN.Contains('Visual Studio')) {
          $options += '-DCMAKE_VS_GLOBALS=TrackFileAccess=false'
        }
        if($env:PRJ_GEN -eq 'Visual Studio 9 2008') {
          # Without this it fails to run due to missing MSVCR90.dll
          $options += '-DCURL_STATIC_CRT=ON'
        }

        Write-Host 'CMake options:' $options
        cmake . $options
        cmake --build . --config $env:PRJ_CFG --parallel 2 --clean-first -- $env:BUILD_OPT
        if($env:SHARED -eq 'ON') {
          Copy-Item -Path 'C:\Projects\curl\lib\*.dll' -Destination 'C:\projects\curl\src'
          Copy-Item -Path 'C:\Projects\curl\lib\*.dll' -Destination 'C:\projects\curl\tests\libtest'
        }
        if($env:OPENSSL -eq 'ON') {
          Copy-Item -Path "$openssl_root\*.dll" -Destination 'C:\projects\curl\src'
        }
        $curl = '.\src\curl.exe'
      }
      elseif($env:BUILD_SYSTEM -eq 'VisualStudioSolution') {
        cd projects
        .\generate.bat $env:VC_VERSION
        msbuild.exe -maxcpucount "-property:Configuration=$env:PRJ_CFG" "Windows\$env:VC_VERSION\curl-all.sln"
        $curl = "..\build\Win32\$env:VC_VERSION\$env:PRJ_CFG\curld.exe"
      }
      elseif($env:BUILD_SYSTEM -eq 'winbuild_vs2015') {
        .\buildconf.bat
        cd winbuild
        Pull-BatchFile-Env 'C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd' /x64
        Pull-BatchFile-Env 'C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat' x86_amd64
        nmake /nologo /f Makefile.vc mode=dll VC=14 "SSL_PATH=$openssl_root" WITH_SSL=dll MACHINE=x64 DEBUG=$env:DEBUG ENABLE_UNICODE=$env:ENABLE_UNICODE
        $curl = "..\builds\libcurl-vc14-x64-$env:PATHPART-dll-ssl-dll-ipv6-sspi\bin\curl.exe"
      }
      elseif($env:BUILD_SYSTEM -eq 'winbuild_vs2017') {
        .\buildconf.bat
        cd winbuild
        Pull-BatchFile-Env 'C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat'
        nmake /nologo /f Makefile.vc mode=dll VC=14.10 "SSL_PATH=$openssl_root" WITH_SSL=dll MACHINE=x64 DEBUG=$env:DEBUG ENABLE_UNICODE=$env:ENABLE_UNICODE
        $curl = "..\builds\libcurl-vc14.10-x64-$env:PATHPART-dll-ssl-dll-ipv6-sspi\bin\curl.exe"
      }
      elseif($env:BUILD_SYSTEM -eq 'autotools') {
        pacman --noconfirm --ask 20 --noprogressbar --sync --refresh --sysupgrade --sysupgrade
        pacman --noconfirm --ask 20 --noprogressbar --sync --refresh --sysupgrade --sysupgrade
        pacman --noconfirm --ask 20 --noprogressbar --sync --needed openssl
        & bash -e -c "cd $env:POSIX_PATH_PREFIX/c/projects/curl && autoreconf -fi 2>&1 && ./configure $env:CONFIG_ARGS 2>&1 && make V=1 && make V=1 examples && cd tests && make V=1"
        $curl = '.\src\curl.exe'
      }

      Get-ChildItem -Path C:\projects\curl -Include ('*.exe', '*.dll') -Recurse -Name
      if($env:SKIP_RUN -eq $null) {
        cmd.exe /c "`"$curl`" -V 2>&1"
        if(-not $?) {
          Write-Host "Error running curl: '$curl':" ("0x" + $LastExitCode.ToString("X"))
          exit 1
        }
      }
      else {
        Write-Host "Skip running curl.exe. Reason: $env:SKIP_RUN"
      }

      if($false) {
        if(Test-Path CMakeFiles/CMakeConfigureLog.yaml) { cat CMakeFiles/CMakeConfigureLog.yaml }
        if(Test-Path CMakeFiles/CMakeOutput.log) { cat CMakeFiles/CMakeOutput.log }
        if(Test-Path CMakeFiles/CMakeError.log) { cat CMakeFiles/CMakeError.log }
        if(Test-Path config.log) { cat config.log }
      }

      if($env:TESTING -eq 'ON' -and $env:BUILD_SYSTEM -eq 'CMake') {
        cmake --build . --config $env:PRJ_CFG --parallel 2 --target testdeps
      }

test_script:
  - ps: |
      if(Test-Path 'C:/msys64/usr/bin/curl.exe') {
        $acurl="-ac $env:POSIX_PATH_PREFIX/c/msys64/usr/bin/curl.exe"
      }
      if(Test-Path 'C:/Windows/System32/curl.exe') {
        $acurl="-ac $env:POSIX_PATH_PREFIX/c/Windows/System32/curl.exe"
      }
      if($env:TESTING -eq 'ON') {
        if($env:BUILD_SYSTEM -eq 'CMake') {
          $env:TFLAGS="$acurl $env:DISABLED_TESTS"
          cmake --build . --config $env:PRJ_CFG --target test-ci
        }
        elseif($env:BUILD_SYSTEM -eq 'autotools') {
          & bash -e -c "cd $env:POSIX_PATH_PREFIX/c/projects/curl && make V=1 TFLAGS='$acurl $env:DISABLED_TESTS' test-ci"
        }
        else {
          & bash -e -c "cd $env:POSIX_PATH_PREFIX/c/projects/curl/tests && ./runtests.pl -a -p !flaky -r -rm $acurl $env:DISABLED_TESTS"
        }
      }

clone_depth: 10

# select branches to avoid testing feature branches twice (as branch and as pull request)
branches:
  only:
    - master
    - /\/ci$/

skip_commits:
  files:
    - '.azure-pipelines.yml'
    - '.circleci/**/*'
    - '.cirrus.yml'
    - '.github/**/*'
    - 'packages/**/*'
    - 'plan9/**/*'

artifacts:
  - path: '**/curl.exe'
    name: curl
  - path: '**/*curl*.dll'
    name: libcurl dll
