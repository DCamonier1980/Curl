#***************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: curl
#
###########################################################################
@PACKAGE_INIT@

if(UNIX OR VCPKG_TOOLCHAIN OR (MINGW AND NOT CMAKE_CROSSCOMPILING))  # Keep in sync with root CMakeLists.txt
  set(_curl_use_pkgconfig_default ON)
else()
  set(_curl_use_pkgconfig_default OFF)
endif()
option(CURL_USE_PKGCONFIG "Enable pkg-config to detect @PROJECT_NAME@ dependencies" ${_curl_use_pkgconfig_default})

include(CMakeFindDependencyMacro)
if("@USE_OPENSSL@")
  find_dependency(OpenSSL "@OPENSSL_VERSION_MAJOR@")
endif()
if("@HAVE_LIBZ@")
  find_dependency(ZLIB "@ZLIB_VERSION_MAJOR@")
endif()

if("@USE_BEARSSL@")
  find_dependency(BearSSL)
endif()
if("@HAVE_BROTLI@")
  find_dependency(Brotli)
endif()
if("@USE_ARES@")
  find_dependency(Cares NAMES "c-ares")
endif()
if("@HAVE_GSSAPI@")
  find_dependency(GSS)
endif()
if("@USE_GSASL@")
  find_dependency(Libgsasl)
endif()
if("@HAVE_LIBIDN2@")
  find_dependency(Libidn2)
endif()
if("@USE_LIBPSL@")
  find_dependency(Libpsl)
endif()
if("@USE_LIBSSH@")
  find_dependency(Libssh)
endif()
if("@USE_LIBSSH2@")
  find_dependency(Libssh2)
endif()
if("@USE_LIBUV@")
  find_dependency(Libuv)
endif()
if("@USE_MSH3@")
  find_dependency(MSH3)
endif()
if("@USE_MBEDTLS@")
  find_dependency(MbedTLS)
endif()
if("@USE_NGHTTP2@")
  find_dependency(NGHTTP2)
endif()
if("@USE_NGHTTP3@")
  find_dependency(NGHTTP3)
endif()
if("@USE_NGTCP2@")
  find_dependency(NGTCP2)
endif()
if("@USE_GNUTLS@")
  if(CURL_USE_PKGCONFIG)
    find_dependency(PkgConfig)
    pkg_check_modules(GNUTLS "gnutls")
  endif()
  if(NOT GNUTLS_FOUND)
    find_dependency(GnuTLS CONFIG)
  endif()
  find_dependency(Nettle)
endif()
if("@USE_QUICHE@")
  find_dependency(Quiche)
endif()
if("@USE_RUSTLS@")
  find_dependency(Rustls)
endif()
if("@USE_WOLFSSH@")
  find_dependency(WolfSSH)
endif()
if("@USE_WOLFSSL@")
  find_dependency(WolfSSL)
endif()
if("@HAVE_ZSTD@")
  find_dependency(Zstd)
endif()

include("${CMAKE_CURRENT_LIST_DIR}/@TARGETS_EXPORT_NAME@.cmake")
check_required_components("@PROJECT_NAME@")

# Alias for either shared or static library
if(NOT TARGET @PROJECT_NAME@::libcurl)
  add_library(@PROJECT_NAME@::libcurl ALIAS @PROJECT_NAME@::@LIB_SELECTED@)
endif()

# For compatibility with CMake's FindCURL.cmake
set(CURL_LIBRARIES @PROJECT_NAME@::libcurl)
set_and_check(CURL_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
