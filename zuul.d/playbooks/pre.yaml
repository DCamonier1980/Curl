---
- hosts: all
  tasks:

  - name: Install latest stable release of go
    when: gimme_stable|default(false)
    block:
      - name: Find latest stable version
        register: go_stable
        uri:
          url: https://golang.org/VERSION?m=text
          return_content: true
      - name: Install Go
        include_role:
          name: ensure-go
        vars:
          go_version: "{{ go_stable.content | regex_replace('^go', '') }}"

      - name: Symlink /usr/local/go/bin/go to /usr/bin/go
        become: true
        file:
          src: /usr/local/go/bin/go
          dest: /usr/bin/go
          state: link

  - name: Install common dependencies
    become: true
    apt:
      update_cache: true
      pkg:
      - autoconf
      - automake
      - cmake
      - valgrind
      - libev-dev
      - libc-ares-dev
      - libssl-dev
      - libtool
      - g++
      - g++-8
      - stunnel4
      - libidn2-dev
      - gnutls-bin
      - python-impacket
      - ninja-build
      - libgsasl7-dev
      - libnghttp2-dev

  - name: Install job-specific packages
    when: curl_apt_packages is defined
    become: true
    apt:
      pkg: "{{ curl_apt_packages }}"

  - name: Symlink /usr/bin/scan-build-10 to /usr/bin/scan-build
    when:
      - curl_apt_packages is defined
      - '"clang-tools-10" in curl_apt_packages'
    become: true
    file:
      src: /usr/bin/scan-build-10
      dest: /usr/bin/scan-build
      state: link


  - name: ngtcp2 enabled
    when: curl_ngtcp2 is true
    block:
    - name: gnutls enabled
      when: curl_gnutls is true
      shell: |
        cd $HOME
        git clone --depth 1 https://gitlab.com/gnutls/nettle.git
        cd nettle
        ./.bootstrap
        ./configure LDFLAGS="-Wl,-rpath,$HOME/ngbuild/lib" --disable-documentation --prefix=$HOME/ngbuild
        make
        make install

        cd $HOME
        git clone --depth 1 https://gitlab.com/gnutls/gnutls.git pgtls
        cd pgtls
        ./bootstrap
        ./configure PKG_CONFIG_PATH=$HOME/ngbuild/lib/pkgconfig LDFLAGS="-Wl,-rpath,$HOME/ngbuild/lib" --with-included-libtasn1 --with-included-unistring --disable-guile --disable-doc --prefix=$HOME/ngbuild
        make
        make install
    - name: gnutls disabled
      when: curl_gnutls is not true
      shell: |
        cd $HOME
        git clone --depth 1 -b OpenSSL_1_1_1j+quic https://github.com/quictls/openssl possl
        cd possl
        ./config enable-tls1_3 --prefix=$HOME/ngbuild
        make
        make install_sw
    - name: nghttp3
      shell: |
        cd $HOME
        git clone --depth 1 https://github.com/ngtcp2/nghttp3
        cd nghttp3
        autoreconf -i
        ./configure --prefix=$HOME/ngbuild --enable-lib-only
        make
        make install
    - name: ngtcp2
      shell: |
        cd $HOME
        git clone --depth 1 https://github.com/ngtcp2/ngtcp2
        cd ngtcp2
        autoreconf -i
        if test -n "$GNUTLS"; then
            WITHGNUTLS="--with-gnutls"
        fi
        ./configure PKG_CONFIG_PATH=$HOME/ngbuild/lib/pkgconfig LDFLAGS="-Wl,-rpath,$HOME/ngbuild/lib" --prefix=$HOME/ngbuild --enable-lib-only $WITHGNUTLS
        make
        make install

  - name: boringssl
    when: curl_boringssl is true
    shell: |
      cd $HOME
      git clone --depth=1 https://boringssl.googlesource.com/boringssl
      cd boringssl
      CXX="g++" CC="gcc" cmake -H. -Bbuild -GNinja -DCMAKE_BUILD_TYPE=release -DBUILD_SHARED_LIBS=1
      cmake --build build
      mkdir lib
      cp ./build/crypto/libcrypto.so ./lib/
      cp ./build/ssl/libssl.so ./lib/
      echo "BoringSSL lib dir: "`pwd`"/lib"
      cmake --build build --target clean
      rm -f build/CMakeCache.txt
      CXX="g++" CC="gcc" cmake -H. -Bbuild -GNinja -DCMAKE_POSITION_INDEPENDENT_CODE=on
      cmake --build build
      export LIBS=-lpthread

  - name: openssl3
    when: curl_boringssl is true
    shell: |
      cd $HOME/src/github.com/openssl/openssl
      ./config enable-tls1_3 --prefix=$HOME/openssl3
      make
      make install_sw

  - name: libressl
    when: curl_libressl is true
    shell: |
      cd $HOME/src/github.com/libressl-portable/portable
      ./autogen.sh
      ./configure --prefix=$HOME/libressl
      make
      make install

  - name: quiche
    when: curl_quiche is true
    shell: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y
      source $HOME/.cargo/env
      cd $HOME/src/github.com/cloudflare/quiche
      cargo build -v --release --features ffi,pkg-config-meta,qlog
      mkdir -v deps/boringssl/src/lib
      ln -vnf $(find target/release -name libcrypto.a -o -name libssl.a) deps/boringssl/src/lib/

  - name: rustls
    when: curl_rustls is defined
    shell: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y
      source $HOME/.cargo/env
      cargo install cbindgen
      cd $HOME/src/github.com/abetterinternet/crustls
      make
      make DESTDIR=$HOME/crust install

  - name: wolfssl
    when: curl_wolfssl is true
    shell: |
      if [ ! -e $HOME/wolfssl-4.7.0-stable/Makefile ]; then
        cd $HOME
        curl -LO https://github.com/wolfSSL/wolfssl/archive/v4.7.0-stable.tar.gz
        tar -xzf v4.7.0-stable.tar.gz
        cd wolfssl-4.7.0-stable
        ./autogen.sh
        ./configure --enable-tls13 --enable-all
        touch wolfssl/wolfcrypt/fips.h
        make
      fi
      cd $HOME/wolfssl-4.7.0-stable
      sudo make install

  - name: mesalink
    when: curl_mesalink is true
    shell: |
      if [ ! -e $HOME/mesalink-1.0.0/Makefile ]; then
        cd $HOME
        curl https://sh.rustup.rs -sSf | sh -s -- -y
        source $HOME/.cargo/env
        curl -LO https://github.com/mesalock-linux/mesalink/archive/v1.0.0.tar.gz
        tar -xzf v1.0.0.tar.gz
        cd mesalink-1.0.0
        ./autogen.sh
        ./configure --enable-tls13
        make
      fi
      cd $HOME/mesalink-1.0.0
      sudo make install

  - name: bearssl
    when: curl_bearssl is true
    shell: |
      if [ ! -e $HOME/bearssl-0.6/Makefile ]; then
        cd $HOME
        curl -LO https://bearssl.org/bearssl-0.6.tar.gz
        tar -xzf bearssl-0.6.tar.gz
        cd bearssl-0.6
        make
      fi
      cd $HOME/bearssl-0.6
      sudo cp inc/*.h /usr/local/include
      sudo cp build/libbearssl.* /usr/local/lib
...
