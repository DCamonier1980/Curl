<testcase>
<info>
<keywords>
HTTP
HTTP GET
HTTP Basic auth
</keywords>
</info>
# Server-side
<reply>

<!-- Request number 1: Basic auth, user1 -->
<data100>
HTTP/1.1 200 Things are fine in server land (1)
Server: libmicrohttpd
Content-Type: text/html; charset=iso-8859-1
Content-Length: 32

Finally, this is the real page!
</data100>

<!-- Request number 2: Basic auth, USER2 -->
<data200>
HTTP/1.1 200 Things are fine in server land (2)
Server: libmicrohttpd
Content-Type: text/html; charset=iso-8859-1
Content-Length: 32

Finally, this is the real page!
</data200>

<!-- Requests number 3: Basic auth, user1 -->
<data300>
HTTP/1.1 200 Things are fine in server land (3)
Server: libmicrohttpd
Content-Type: text/html; charset=iso-8859-1
Content-Length: 32

Finally, this is the real page!
</data300>

<!-- Requests number 4: Basic auth, user1 -->
<data310>
HTTP/1.1 200 Things are fine in server land (4)
Server: libmicrohttpd
Content-Type: text/html; charset=iso-8859-1
Content-Length: 32

Finally, this is the real page!
</data310>

<!-- Requests number 5: Basic auth, USER2 -->
<data400>
HTTP/1.1 200 Things are fine in server land (5)
Server: libmicrohttpd
Content-Type: text/html; charset=iso-8859-1
Content-Length: 32

Finally, this is the real page!
</data400>

<!-- Requests number 6: Basic auth, USER2 -->
<data410>
HTTP/1.1 200 Things are fine in server land (6)
Server: libmicrohttpd
Content-Type: text/html; charset=iso-8859-1
Content-Length: 32

Finally, this is the real page!
</data410>
<datacheck>
HTTP/1.1 200 Things are fine in server land (1)
Server: libmicrohttpd
Content-Type: text/html; charset=iso-8859-1
Content-Length: 32

Finally, this is the real page!
HTTP/1.1 200 Things are fine in server land (2)
Server: libmicrohttpd
Content-Type: text/html; charset=iso-8859-1
Content-Length: 32

Finally, this is the real page!
HTTP/1.1 200 Things are fine in server land (3)
Server: libmicrohttpd
Content-Type: text/html; charset=iso-8859-1
Content-Length: 32

Finally, this is the real page!
HTTP/1.1 200 Things are fine in server land (4)
Server: libmicrohttpd
Content-Type: text/html; charset=iso-8859-1
Content-Length: 32

Finally, this is the real page!
HTTP/1.1 200 Things are fine in server land (5)
Server: libmicrohttpd
Content-Type: text/html; charset=iso-8859-1
Content-Length: 32

Finally, this is the real page!
HTTP/1.1 200 Things are fine in server land (6)
Server: libmicrohttpd
Content-Type: text/html; charset=iso-8859-1
Content-Length: 32

Finally, this is the real page!
</datacheck>

</reply>

# Client-side
<client>
<server>
http
</server>
<tool>
libauthrepeat
</tool>

<name>
HTTP Basic auth repeat with varying user
</name>
<setenv>
# we force our own host name, in order to make the test machine independent
CURL_GETHOSTNAME=curlhost
# we try to use the LD_PRELOAD hack, if not a debug build
LD_PRELOAD=%PWD/libtest/.libs/libhostname.so
</setenv>
<command>
http://%HOSTIP:%HTTPPORT/%TESTNUMBER basic user1-USER2
</command>
<precheck>
chkhostname curlhost
</precheck>
</client>

# Verify data after the test has been "shot"
<verify>
<protocol>
GET /%TESTNUMBER0100 HTTP/1.1
Host: %HOSTIP:%HTTPPORT
Authorization: Basic dXNlcjE6dGVzdHBhc3M=
Accept: */*

GET /%TESTNUMBER0200 HTTP/1.1
Host: %HOSTIP:%HTTPPORT
Authorization: Basic VVNFUjI6dGVzdHBhc3M=
Accept: */*

GET /%TESTNUMBER0300 HTTP/1.1
Host: %HOSTIP:%HTTPPORT
Authorization: Basic dXNlcjE6dGVzdHBhc3M=
Accept: */*

GET /%TESTNUMBER0310 HTTP/1.1
Host: %HOSTIP:%HTTPPORT
Authorization: Basic dXNlcjE6dGVzdHBhc3M=
Accept: */*

GET /%TESTNUMBER0400 HTTP/1.1
Host: %HOSTIP:%HTTPPORT
Authorization: Basic VVNFUjI6dGVzdHBhc3M=
Accept: */*

GET /%TESTNUMBER0410 HTTP/1.1
Host: %HOSTIP:%HTTPPORT
Authorization: Basic VVNFUjI6dGVzdHBhc3M=
Accept: */*

</protocol>
</verify>
</testcase>
