#***************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) 1999 - 2010, Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at http://curl.haxx.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
#***************************************************************************

#############################################################
#
## Makefile for building curl.exe with MSVC6
## Use: nmake -f makefile.vc6 [release | debug] [CFG=release-ssl]
##      (default is release)
## "nmake -f makefile.vc6 CFG=release-ssl" statically links OpenSSL
## into curl.exe producing a standalone SSL-enabled executable.
##
#
#############################################################

PROGRAM_NAME = curl.exe

<<<<<<< HEAD
!include "../Makefile.inc.vc"
=======
# -------------------------------------------
# Verify that current subdir is curl's 'src'
# -------------------------------------------

!IF ! EXIST(.\main.c)
!  MESSAGE Can not process this makefile from outside of curl's 'src' subdirectory.
!  MESSAGE Change to curl's 'src' subdirectory, and try again.
!  ERROR   See previous message.
!ENDIF

# ------------------------------------------------
# Makefile.msvc.names provides libcurl file names
# ------------------------------------------------

!INCLUDE ..\Makefile.msvc.names



!IFNDEF OPENSSL_PATH
OPENSSL_PATH = ../../openssl-0.9.8o
!ENDIF

!IFNDEF ZLIB_PATH
ZLIB_PATH = ../../zlib-1.2.5
!ENDIF

!IFNDEF MACHINE
MACHINE  = X86
!ENDIF
>>>>>>> upstream/master

DIROBJ = ..\builds\curl-$(CFG)-obj
DIRDIST = ..\builds\curl-$(CFG)\

########################################################
## Nothing more to do below this line!
ZLIB_CFLAGS   = /DHAVE_ZLIB_H /DHAVE_ZLIB /DHAVE_LIBZ /I "$(ZLIB_PATH)"
ZLIB_LFLAGS   = "/LIBPATH:$(ZLIB_PATH)"
ZLIB_LIBS     = zlib.lib
ZLIB_IMP_LIBS = zdll.lib

SSL_CFLAGS     = /DUSE_SSLEAY
SSL_LFLAGS     = /LIBPATH:"$(OPENSSL_PATH)/out32"
SSL_IMP_LFLAGS = /LIBPATH:"$(OPENSSL_PATH)/out32dll"
SSL_LIBS       = libeay32.lib ssleay32.lib gdi32.lib user32.lib advapi32.lib

LIBCURL_PATH=..\builds\lib-$(CFG)

## Release
CCR   = cl.exe $(RTLIB) /O2 /DNDEBUG
LINKR = link.exe /incremental:no /libpath:"$(LIBCURL_PATH)"
RCR   = rc.exe /dDEBUGBUILD=0

## Debug
CCD   = cl.exe $(RTLIBD) /Gm /ZI /Od /D_DEBUG /GZ
LINKD = link.exe /incremental:yes /debug /libpath:"$(LIBCURL_PATH)"
RCD   = rc.exe /dDEBUGBUILD=1

CFLAGS   = /I../lib /I../include /nologo /W3 /GX /DWIN32 /YX /FD /c
LFLAGS   = /nologo /out:$(DIRDIST)\$(PROGRAM_NAME) /subsystem:console /machine:$(MACHINE)
RESFLAGS = /i../include

# This manifest thing is for VC8, enabled by the maketgz script that
# builds the VC8 version of this makefile. Left commented out in the VC6
# version!
!IFDEF EMBEND_MANIFEST
MANIFESTTOOL = mt -manifest $(DIRDIST)\$(PROGRAM_NAME).manifest -outputresource:$(DIRDIST)\$(PROGRAM_NAME);1
!ENDIF

!IFDEF WINDOWS_SSPI
CFLAGS = $(CFLAGS) /DUSE_WINDOWS_SSPI 
!ENDIF

!IFDEF WINDOWS_SDK_PATH
CFLAGS = $(CFLAGS) /I$(WINDOWS_SDK_PATH)\include
!ENDIF

OBJS= \
	$(DIROBJ)\curlutil.obj \
	$(DIROBJ)\getpass.obj \
	$(DIROBJ)\homedir.obj \
	$(DIROBJ)\hugehelp.obj \
	$(DIROBJ)\main.obj \
	$(DIROBJ)\nonblock.obj \
	$(DIROBJ)\os-specific.obj \
	$(DIROBJ)\rawstr.obj \
	$(DIROBJ)\strtoofft.obj \
	$(DIROBJ)\urlglob.obj \
	$(DIROBJ)\writeout.obj \
	$(DIROBJ)\xattr.obj \
	$(DIROBJ)\curl.res

#################################################
# If CFG not specified, use static libs

CFLAGS         = $(CFLAGS) /DCURL_STATICLIB
<<<<<<< HEAD
LINKLIBS       = $(LIB_NAME_STATIC)
LINKLIBS_DEBUG = $(LIB_NAME_STATIC_DEBUG)
=======
LINKLIBS       = $(LIBCURL_STA_LIB_REL)
LINKLIBS_DEBUG = $(LIBCURL_STA_LIB_DBG)
>>>>>>> upstream/master

#################################################
# release dynamic library

!IF "$(CFG)" == "release-dll"
<<<<<<< HEAD
LINKLIBS       = $(LIB_NAME_IMP)
LINKLIBS_DEBUG = $(LIB_NAME_IMP_DEBUG)
=======
LINKLIBS       = $(LIBCURL_IMP_LIB_REL)
LINKLIBS_DEBUG = $(LIBCURL_IMP_LIB_DBG)
>>>>>>> upstream/master
!ENDIF

#################################################
# release static library with zlib

!IF "$(CFG)" == "release-zlib"
CFLAGS         = $(CFLAGS) $(ZLIB_CFLAGS) /DCURL_STATICLIB
<<<<<<< HEAD
LINKLIBS       = $(LIB_NAME_STATIC)  $(ZLIB_LIBS)
LINKLIBS_DEBUG = $(LIB_NAME_STATIC_DEBUG) $(ZLIB_LIBS)
=======
LINKLIBS       = $(LIBCURL_STA_LIB_REL) $(ZLIB_LIBS)
LINKLIBS_DEBUG = $(LIBCURL_STA_LIB_DBG) $(ZLIB_LIBS)
>>>>>>> upstream/master
LFLAGS         = $(LFLAGS) $(ZLIB_LFLAGS)
!ENDIF

#################################################
# release static library with ssl

!IF "$(CFG)" == "release-ssl"
CFLAGS         = $(CFLAGS) $(SSL_CFLAGS) /DCURL_STATICLIB
<<<<<<< HEAD
LINKLIBS       = $(LIB_NAME_STATIC)  $(SSL_LIBS)
LINKLIBS_DEBUG = $(LIB_NAME_STATIC_DEBUG) $(SSL_LIBS)
=======
LINKLIBS       = $(LIBCURL_STA_LIB_REL) $(SSL_LIBS)
LINKLIBS_DEBUG = $(LIBCURL_STA_LIB_DBG) $(SSL_LIBS)
>>>>>>> upstream/master
LFLAGS         = $(LFLAGS) $(SSL_LFLAGS)
!ENDIF

#################################################
# release dynamic library with dynamic ssl

!IF "$(CFG)" == "release-dll-ssl-dll"
CFLAGS         = $(CFLAGS) $(SSL_CFLAGS)
<<<<<<< HEAD
LINKLIBS       = $(LIB_NAME_IMP)  $(SSL_LIBS)
LINKLIBS_DEBUG = $(LIB_NAME_IMP_DEBUG) $(SSL_LIBS)
=======
LINKLIBS       = $(LIBCURL_IMP_LIB_REL) $(SSL_LIBS)
LINKLIBS_DEBUG = $(LIBCURL_IMP_LIB_DBG) $(SSL_LIBS)
>>>>>>> upstream/master
LFLAGS         = $(LFLAGS) $(SSL_IMP_LFLAGS)
!ENDIF

#################################################
# release static library with ssl and zlib

!IF "$(CFG)" == "release-ssl-zlib"
CFLAGS         = $(CFLAGS) $(SSL_CFLAGS) $(ZLIB_CFLAGS) /DCURL_STATICLIB
<<<<<<< HEAD
LINKLIBS       = $(LIB_NAME_STATIC)  $(SSL_LIBS) $(ZLIB_LIBS)
LINKLIBS_DEBUG = $(LIB_NAME_STATIC_DEBUG) $(SSL_LIBS) $(ZLIB_LIBS)
=======
LINKLIBS       = $(LIBCURL_STA_LIB_REL) $(SSL_LIBS) $(ZLIB_LIBS)
LINKLIBS_DEBUG = $(LIBCURL_STA_LIB_DBG) $(SSL_LIBS) $(ZLIB_LIBS)
>>>>>>> upstream/master
LFLAGS         = $(LFLAGS) $(SSL_LFLAGS) $(ZLIB_LFLAGS)
!ENDIF

#################################################
# release static library with dynamic ssl

!IF "$(CFG)" == "release-ssl-dll"
CFLAGS         = $(CFLAGS) $(SSL_CFLAGS) /DCURL_STATICLIB
<<<<<<< HEAD
LINKLIBS       = $(LIB_NAME_STATIC)  $(SSL_LIBS)
LINKLIBS_DEBUG = $(LIB_NAME_STATIC_DEBUG) $(SSL_LIBS)
=======
LINKLIBS       = $(LIBCURL_STA_LIB_REL) $(SSL_LIBS)
LINKLIBS_DEBUG = $(LIBCURL_STA_LIB_DBG) $(SSL_LIBS)
>>>>>>> upstream/master
LFLAGS         = $(LFLAGS) $(SSL_IMP_LFLAGS)
!ENDIF

#################################################
# release static library with dynamic zlib

!IF "$(CFG)" == "release-zlib-dll"
CFLAGS         = $(CFLAGS) $(ZLIB_CFLAGS) /DCURL_STATICLIB
<<<<<<< HEAD
LINKLIBS       = $(LIB_NAME_STATIC)  $(ZLIB_IMP_LIBS)
LINKLIBS_DEBUG = $(LIB_NAME_STATIC_DEBUG) $(ZLIB_IMP_LIBS)
=======
LINKLIBS       = $(LIBCURL_STA_LIB_REL) $(ZLIB_IMP_LIBS)
LINKLIBS_DEBUG = $(LIBCURL_STA_LIB_DBG) $(ZLIB_IMP_LIBS)
>>>>>>> upstream/master
LFLAGS         = $(LFLAGS) $(ZLIB_LFLAGS)
!ENDIF

#################################################
# release dynamic library with dynamic zlib

!IF "$(CFG)" == "release-dll-zlib-dll"
CFLAGS         = $(CFLAGS) $(ZLIB_CFLAGS)
<<<<<<< HEAD
LINKLIBS       = $(LIB_NAME_IMP)  $(ZLIB_IMP_LIBS)
LINKLIBS_DEBUG = $(LIB_NAME_IMP_DEBUG) $(ZLIB_IMP_LIBS)
=======
LINKLIBS       = $(LIBCURL_IMP_LIB_REL) $(ZLIB_IMP_LIBS)
LINKLIBS_DEBUG = $(LIBCURL_IMP_LIB_DBG) $(ZLIB_IMP_LIBS)
>>>>>>> upstream/master
LFLAGS         = $(LFLAGS) $(ZLIB_LFLAGS)
!ENDIF

#################################################
# release static library with dynamic ssl and dynamic zlib

!IF "$(CFG)" == "release-ssl-dll-zlib-dll"
CFLAGS         = $(CFLAGS) $(SSL_CFLAGS) $(ZLIB_CFLAGS) /DCURL_STATICLIB
<<<<<<< HEAD
LINKLIBS       = $(LIB_NAME_STATIC)  $(SSL_LIBS) $(ZLIB_IMP_LIBS)
LINKLIBS_DEBUG = $(LIB_NAME_STATIC_DEBUG) $(SSL_LIBS) $(ZLIB_IMP_LIBS)
=======
LINKLIBS       = $(LIBCURL_STA_LIB_REL) $(SSL_LIBS) $(ZLIB_IMP_LIBS)
LINKLIBS_DEBUG = $(LIBCURL_STA_LIB_DBG) $(SSL_LIBS) $(ZLIB_IMP_LIBS)
>>>>>>> upstream/master
LFLAGS         = $(LFLAGS) $(SSL_IMP_LFLAGS) $(ZLIB_LFLAGS)
!ENDIF

#################################################
# release dynamic library with dynamic ssl and dynamic zlib

!IF "$(CFG)" == "release-dll-ssl-dll-zlib-dll"
CFLAGS         = $(CFLAGS) $(SSL_CFLAGS) $(ZLIB_CFLAGS)
<<<<<<< HEAD
LINKLIBS       = $(LIB_NAME_IMP)  $(SSL_LIBS) $(ZLIB_IMP_LIBS)
LINKLIBS_DEBUG = $(LIB_NAME_IMP_DEBUG) $(SSL_LIBS) $(ZLIB_IMP_LIBS)
=======
LINKLIBS       = $(LIBCURL_IMP_LIB_REL) $(SSL_LIBS) $(ZLIB_IMP_LIBS)
LINKLIBS_DEBUG = $(LIBCURL_IMP_LIB_DBG) $(SSL_LIBS) $(ZLIB_IMP_LIBS)
>>>>>>> upstream/master
LFLAGS         = $(LFLAGS) $(SSL_IMP_LFLAGS) $(ZLIB_LFLAGS)
!ENDIF

LINKLIBS       = $(LINKLIBS) ws2_32.lib wldap32.lib
LINKLIBS_DEBUG = $(LINKLIBS_DEBUG) ws2_32.lib wldap32.lib

all : release

release: $(DIRDIST) $(DIROBJ)  $(OBJS)
	$(LINKR) $(LFLAGS) $(LINKLIBS) $(OBJS)
        $(MANIFESTTOOL)

debug: $(DIRDIST) $(DIROBJ) $(OBJS)
	$(LINKD) $(LFLAGS) $(LINKLIBS_DEBUG) $(OBJS)
        $(MANIFESTTOOL)

$(DIROBJ)\hugehelp.obj: hugehelp.c
	$(CCR) $(CFLAGS) /Zm200 /Fo"$@" hugehelp.c
$(DIROBJ)\writeout.obj: writeout.c
	$(CCR) $(CFLAGS) /Fo"$@" writeout.c
$(DIROBJ)\urlglob.obj: urlglob.c
	$(CCR) $(CFLAGS) /Fo"$@" urlglob.c
$(DIROBJ)\getpass.obj: getpass.c
	$(CCR) $(CFLAGS) /Fo"$@" getpass.c
$(DIROBJ)\homedir.obj: homedir.c
	$(CCR) $(CFLAGS) /Fo"$@" homedir.c
$(DIROBJ)\curlutil.obj: curlutil.c
	$(CCR) $(CFLAGS) /Fo"$@" curlutil.c
$(DIROBJ)\os-specific.obj: os-specific.c
	$(CCR) $(CFLAGS) /Fo"$@" os-specific.c
$(DIROBJ)\nonblock.obj: ../lib/nonblock.c
	$(CCR) $(CFLAGS) /Fo"$@" ../lib/nonblock.c
$(DIROBJ)\rawstr.obj: ../lib/rawstr.c
	$(CCR) $(CFLAGS) /Fo"$@" ../lib/rawstr.c
$(DIROBJ)\strtoofft.obj: ../lib/strtoofft.c
	$(CCR) $(CFLAGS) /Fo"$@" ../lib/strtoofft.c
$(DIROBJ)\xattr.obj: xattr.c
	$(CCR) $(CFLAGS) /Fo"$@" xattr.c
$(DIROBJ)\main.obj: main.c
	$(CCR) $(CFLAGS) /Fo"$@" main.c
$(DIROBJ)\curl.res : curl.rc
	$(RCR) $(RESFLAGS) /Fo"$@" curl.rc

$(DIRDIST):
	@if not exist "$(DIRDIST)" mkdir $(DIRDIST)

$(DIROBJ):
	@if not exist "$(DIROBJ)" mkdir $(DIROBJ)

clean:
!IF "$(CFG)" != ""
	@-erase /q $(DIROBJ)\* >nul 2<&1
	@-erase /q $(DIRDIST)\* >nul 2<&1
!ELSE
	@for /d %a IN (..\builds\*) do @erase /S /Q %a
!ENDIF
	@-erase /q *.idb 2> NUL
	@-erase /q *.pdb 2> NUL
	@-erase /q *.pch 2> NUL
	@-erase /q *.ilk 2> NUL
