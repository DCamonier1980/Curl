#***************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) 1999 - 2022, Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: curl
#
#***************************************************************************

###########################################################################
#
# Makefile for building curl.exe with MinGW and optional features.
#
# Usage:   mingw32-make -f Makefile.m32 CFG=-feature1[-feature2][-feature3][...]
# Example: mingw32-make -f Makefile.m32 CFG=-zlib-ssl-sspi-winidn
#
# Hint: you can also set environment vars to control the build, e.g.:
# set ZLIB_PATH=C:/zlib
# set ZLIB=1
#
###########################################################################

PROOT := ..

ZLIB_PATH     ?= $(PROOT)/../zlib
ZSTD_PATH     ?= $(PROOT)/../zstd
BROTLI_PATH   ?= $(PROOT)/../brotli
OPENSSL_PATH  ?= $(PROOT)/../openssl
LIBSSH2_PATH  ?= $(PROOT)/../libssh2
LIBRTMP_PATH  ?= $(PROOT)/../librtmp
LIBGSASL_PATH ?= $(PROOT)/../gsasl
LIBIDN2_PATH  ?= $(PROOT)/../libidn2
NGHTTP2_PATH  ?= $(PROOT)/../nghttp2
NGHTTP3_PATH  ?= $(PROOT)/../nghttp3
NGTCP2_PATH   ?= $(PROOT)/../ngtcp2
LIBCARES_PATH ?= $(PROOT)/../c-ares

ifneq ($(findstring -dyn,$(CFG)),)
DYN := 1
endif
ifneq ($(findstring -ares,$(CFG)),)
ARES := 1
endif
ifneq ($(findstring -sync,$(CFG)),)
SYNC := 1
endif
ifneq ($(findstring -ssl,$(CFG)),)
SSL := 1
endif
ifneq ($(findstring -schannel,$(CFG)),)
SCHANNEL := 1
SSPI := 1
endif
ifneq ($(findstring -ssh2,$(CFG)),)
SSH2 := 1
endif
ifneq ($(findstring -rtmp,$(CFG)),)
RTMP := 1
ZLIB := 1
endif
ifneq ($(findstring -srp,$(CFG)),)
SRP := 1
endif
ifneq ($(findstring -zlib,$(CFG)),)
ZLIB := 1
endif
ifneq ($(findstring -zstd,$(CFG)),)
ZSTD := 1
endif
ifneq ($(findstring -brotli,$(CFG)),)
BROTLI := 1
endif
ifneq ($(findstring -gsasl,$(CFG)),)
GSASL := 1
endif
ifneq ($(findstring -idn2,$(CFG)),)
IDN2 := 1
endif
ifneq ($(findstring -winidn,$(CFG)),)
WINIDN := 1
endif
ifneq ($(findstring -sspi,$(CFG)),)
SSPI := 1
endif
ifneq ($(findstring -ldaps,$(CFG)),)
LDAPS := 1
endif
ifneq ($(findstring -ipv6,$(CFG)),)
IPV6 := 1
endif
ifneq ($(findstring -nghttp2,$(CFG)),)
NGHTTP2 := 1
endif
ifneq ($(findstring -nghttp3,$(CFG)),)
NGHTTP3 := 1
endif
ifneq ($(findstring -ngtcp2,$(CFG)),)
NGTCP2 := 1
endif
ifneq ($(findstring -unicode,$(CFG)),)
UNICODE := 1
endif

# SSH2 and RTMP require an SSL library; assume OpenSSL if none specified
ifneq ($(SSH2)$(RTMP),)
  ifeq ($(SCHANNEL),)
    SSL := 1
  endif
endif

### Init toolchain

CC ?= $(CROSSPREFIX)gcc
RC ?= $(CROSSPREFIX)windres

CPPFLAGS += -I. -I$(PROOT)/include -I$(PROOT)/lib
RCFLAGS  += -I$(PROOT)/include -DCURL_EMBED_MANIFEST
LDFLAGS  += -L$(PROOT)/lib
LIBS     += -lcurl

ifneq ($(ARCH),custom)
  # Set environment var ARCH to your architecture to override autodetection.
  ifndef ARCH
    ifneq ($(findstring x86_64,$(shell $(CC) -dumpmachine)),)
      ARCH := w64
    else
      ARCH := w32
    endif
  endif
  ifeq ($(ARCH),w64)
    CFLAGS  += -m64
    LDFLAGS += -m64
    RCFLAGS += --target=pe-x86-64
  else
    CFLAGS  += -m32
    LDFLAGS += -m32
    RCFLAGS += --target=pe-i386
  endif
endif

### Optional features

ifdef DYN
  curl_DEPENDENCIES := $(PROOT)/lib/libcurl.dll.a $(PROOT)/lib/libcurl$(CURL_DLL_SUFFIX).dll
else
  curl_DEPENDENCIES := $(PROOT)/lib/libcurl.a
  CPPFLAGS += -DCURL_STATICLIB
  LDFLAGS += -static
endif
ifdef UNICODE
  CPPFLAGS += -DUNICODE -D_UNICODE
  LDFLAGS += -municode
endif
ifdef SYNC
else
  ifdef ARES
    LDFLAGS += -L"$(LIBCARES_PATH)/lib"
    LIBS += -lcares
  endif
endif
ifdef RTMP
  LDFLAGS += -L"$(LIBRTMP_PATH)/librtmp"
  LIBS += -lrtmp -lwinmm
endif
ifdef SSH2
  LDFLAGS += -L"$(LIBSSH2_PATH)/lib"
  LDFLAGS += -L"$(LIBSSH2_PATH)/win32"
  LIBS += -lssh2
endif
ifdef NGHTTP2
  LDFLAGS += -L"$(NGHTTP2_PATH)/lib"
  LIBS += -lnghttp2
endif
ifdef NGHTTP3
  ifdef NGTCP2
    LDFLAGS += -L"$(NGHTTP3_PATH)/lib"
    LIBS += -lnghttp3
    LDFLAGS += -L"$(NGTCP2_PATH)/lib"
    ifdef NGTCP2_LIBS
      LIBS += $(NGTCP2_LIBS)
    else
      LIBS += -lngtcp2 -lngtcp2_crypto_openssl
    endif
  endif
endif
ifdef SSL
  ifndef OPENSSL_LIBPATH
    OPENSSL_LIBPATH := $(OPENSSL_PATH)/lib
    OPENSSL_LIBS := -lssl -lcrypto
  endif
  LDFLAGS += -L"$(OPENSSL_LIBPATH)"
  LIBS += $(OPENSSL_LIBS)
endif
ifdef ZLIB
  CPPFLAGS += -DHAVE_LIBZ -DHAVE_ZLIB_H
  CPPFLAGS += -I"$(ZLIB_PATH)"
  LDFLAGS += -L"$(ZLIB_PATH)"
  LIBS += -lz
endif
ifdef ZSTD
  LDFLAGS += -L"$(ZSTD_PATH)/lib"
  ifdef ZSTD_LIBS
    LIBS += $(ZSTD_LIBS)
  else
    LIBS += -lzstd
  endif
endif
ifdef BROTLI
  LDFLAGS += -L"$(BROTLI_PATH)/lib"
  ifdef BROTLI_LIBS
    LIBS += $(BROTLI_LIBS)
  else
    LIBS += -lbrotlidec -lbrotlicommon
  endif
endif
ifdef GSASL
  LDFLAGS += -L"$(LIBGSASL_PATH)/lib"
  LIBS += -lgsasl
endif
ifdef IDN2
  LDFLAGS += -L"$(LIBIDN2_PATH)/lib"
  LIBS += -lidn2
else
ifdef WINIDN
  LIBS += -lnormaliz
endif
endif
ifeq ($(findstring -lldap,$(LIBS)),)
  LIBS += -lwldap32
endif
LIBS += -lws2_32 -lcrypt32 -lbcrypt

### Sources and targets

# Provides CURL_CFILES and CURLX_CFILES
include Makefile.inc

TARGETS := curl.exe
curl_OBJECTS := $(patsubst %.c,%.o,$(strip $(CURL_CFILES)))
curl_OBJECTS += $(patsubst %.c,%.o,$(notdir $(strip $(CURLX_CFILES))))
vpath %.c $(PROOT)/lib

RESOURCE := curl.res

### Rules

ifneq ($(findstring /sh,$(SHELL)),)
DEL = rm -f $1
else
DEL = -del 2>NUL /q /f $(subst /,\,$1)
endif

all: $(TARGETS)

$(TARGETS): $(curl_OBJECTS) $(RESOURCE) $(curl_DEPENDENCIES)
	$(CC) $(LDFLAGS) $(CURL_LDFLAGS_EXE) -o $@ $(curl_OBJECTS) $(RESOURCE) $(LIBS)

%.o: %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $<

%.res: %.rc
	$(RC) -O coff $(RCFLAGS) -i $< -o $@

clean:
	@$(call DEL, $(curl_OBJECTS) $(RESOURCE))

distclean vclean: clean
	@$(call DEL, $(TARGETS))
