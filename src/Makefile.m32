#***************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) 1999 - 2022, Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: curl
#
#***************************************************************************

###########################################################################
#
# Makefile for building curl.exe with MinGW and optional features.
#
# Usage:   mingw32-make -f Makefile.m32 CFG=-feature1[-feature2][-feature3][...]
# Example: mingw32-make -f Makefile.m32 CFG=-zlib-ssl-sspi-winidn
#
# Hint: you can also set environment vars to control the build, e.g.:
# set ZLIB_PATH=C:/zlib
# set ZLIB=1
#
###########################################################################

PROOT := ..

ifndef ZLIB_PATH
ZLIB_PATH := $(PROOT)/../zlib
endif
ifndef ZSTD_PATH
ZSTD_PATH := $(PROOT)/../zstd
endif
ifndef BROTLI_PATH
BROTLI_PATH := $(PROOT)/../brotli
endif
ifndef OPENSSL_PATH
OPENSSL_PATH := $(PROOT)/../openssl
endif
ifndef LIBSSH2_PATH
LIBSSH2_PATH := $(PROOT)/../libssh2
endif
ifndef LIBRTMP_PATH
LIBRTMP_PATH := $(PROOT)/../librtmp
endif
ifndef LIBGSASL_PATH
LIBGSASL_PATH := $(PROOT)/../gsasl
endif
ifndef LIBIDN2_PATH
LIBIDN2_PATH := $(PROOT)/../libidn2
endif
ifndef NGHTTP2_PATH
NGHTTP2_PATH := $(PROOT)/../nghttp2
endif
ifndef NGHTTP3_PATH
NGHTTP3_PATH := $(PROOT)/../nghttp3
endif
ifndef NGTCP2_PATH
NGTCP2_PATH := $(PROOT)/../ngtcp2
endif
ifndef LIBCARES_PATH
LIBCARES_PATH := $(PROOT)/../c-ares
endif

ifeq ($(CC),)
CC := $(CROSSPREFIX)gcc
endif
ifeq ($(RC),)
RC := $(CROSSPREFIX)windres
endif

CFLAGS  := -O3 $(CFLAGS) -W -Wall
LDFLAGS := $(LDFLAGS) $(CURL_LDFLAG_EXTRAS_EXE)
RCFLAGS := -I$(PROOT)/include -O coff -DCURL_EMBED_MANIFEST $(RCFLAGS)

# Deprecated
CFLAGS  += $(CURL_CFLAG_EXTRAS)
LDFLAGS += $(CURL_LDFLAG_EXTRAS)
RCFLAGS += $(CURL_RCFLAG_EXTRAS)

# Set environment var ARCH to your architecture to override autodetection.
ifndef ARCH
ifneq ($(findstring x86_64,$(shell $(CC) -dumpmachine)),)
ARCH := w64
else
ARCH := w32
endif
endif

ifneq ($(ARCH),custom)
ifeq ($(ARCH),w64)
CFLAGS  += -m64
LDFLAGS += -m64
RCFLAGS += --target=pe-x86-64
else
CFLAGS  += -m32
LDFLAGS += -m32
RCFLAGS += --target=pe-i386
endif
endif

# Platform-dependent helper tool macros
ifneq ($(findstring /sh,$(SHELL)),)
DEL     := rm -f $1
else
ifeq "$(OS)" "Windows_NT"
DEL     := -del 2>NUL /q /f $(subst /,\,$1)
else
DEL     := -del 2>NUL $(subst /,\,$1)
endif
endif

########################################################
## Nothing more to do below this line!

ifneq ($(findstring -dyn,$(CFG)),)
DYN := 1
endif
ifneq ($(findstring -ares,$(CFG)),)
ARES := 1
endif
ifneq ($(findstring -sync,$(CFG)),)
SYNC := 1
endif
ifneq ($(findstring -rtmp,$(CFG)),)
RTMP := 1
ZLIB := 1
endif
ifneq ($(findstring -ssh2,$(CFG)),)
SSH2 := 1
ZLIB := 1
endif
ifneq ($(findstring -ssl,$(CFG)),)
SSL := 1
endif
ifneq ($(findstring -zlib,$(CFG)),)
ZLIB := 1
endif
ifneq ($(findstring -zstd,$(CFG)),)
ZSTD := 1
endif
ifneq ($(findstring -brotli,$(CFG)),)
BROTLI := 1
endif
ifneq ($(findstring -gsasl,$(CFG)),)
GSASL := 1
endif
ifneq ($(findstring -idn2,$(CFG)),)
IDN2 := 1
endif
ifneq ($(findstring -winidn,$(CFG)),)
WINIDN := 1
endif
ifneq ($(findstring -sspi,$(CFG)),)
SSPI := 1
endif
ifneq ($(findstring -ldaps,$(CFG)),)
LDAPS := 1
endif
ifneq ($(findstring -ipv6,$(CFG)),)
IPV6 := 1
endif
ifneq ($(findstring -schannel,$(CFG))$(findstring -winssl,$(CFG)),)
SCHANNEL := 1
SSPI := 1
endif
ifneq ($(findstring -nghttp2,$(CFG)),)
NGHTTP2 := 1
endif
ifneq ($(findstring -nghttp3,$(CFG)),)
NGHTTP3 := 1
endif
ifneq ($(findstring -ngtcp2,$(CFG)),)
NGTCP2 := 1
endif
ifneq ($(findstring -unicode,$(CFG)),)
UNICODE := 1
endif

# SSH2 and RTMP require an SSL library; assume OpenSSL if none specified
ifneq ($(SSH2)$(RTMP),)
  ifeq ($(SSL)$(SCHANNEL),)
    SSL := 1
  endif
endif

CPPFLAGS += -I. -I$(PROOT)/include -I$(PROOT)/lib
ifdef SSL
  ifdef SCHANNEL
    CPPFLAGS += -DCURL_WITH_MULTI_SSL
  endif
endif
ifdef UNICODE
  CPPFLAGS += -DUNICODE -D_UNICODE
  LDFLAGS += -municode
endif

ifeq ($(CURL_DLL_A_SUFFIX),)
CURL_DLL_A_SUFFIX := dll
endif

ifdef DYN
  curl_DEPENDENCIES := $(PROOT)/lib/libcurl$(CURL_DLL_A_SUFFIX).a $(PROOT)/lib/libcurl$(CURL_DLL_SUFFIX).dll
  LDFLAGS += -L$(PROOT)/lib
  LIBS += -lcurldll
else
  curl_DEPENDENCIES := $(PROOT)/lib/libcurl.a
  LDFLAGS += -L$(PROOT)/lib
  LIBS += -lcurl
  CPPFLAGS += -DCURL_STATICLIB
  LDFLAGS += -static
endif
ifdef SYNC
  CPPFLAGS += -DUSE_SYNC_DNS
else
  ifdef ARES
    CPPFLAGS += -DUSE_ARES -DCARES_STATICLIB
    LDFLAGS += -L"$(LIBCARES_PATH)"
    LIBS += -lcares
  endif
endif
ifdef RTMP
  CPPFLAGS += -DUSE_LIBRTMP
  LDFLAGS += -L"$(LIBRTMP_PATH)/librtmp"
  LIBS += -lrtmp -lwinmm
endif
ifdef NGHTTP2
  CPPFLAGS += -DUSE_NGHTTP2
  LDFLAGS += -L"$(NGHTTP2_PATH)/lib"
  LIBS += -lnghttp2
endif
ifdef SSH2
  CPPFLAGS += -DUSE_LIBSSH2 -DHAVE_LIBSSH2_H
  LDFLAGS += -L"$(LIBSSH2_PATH)/lib"
  LDFLAGS += -L"$(LIBSSH2_PATH)/win32"
  LIBS += -lssh2
endif
ifdef NGHTTP3
  CPPFLAGS += -DUSE_NGHTTP3
  LDFLAGS += -L"$(NGHTTP3_PATH)/lib"
  LIBS += -lnghttp3
  ifdef NGTCP2
    CPPFLAGS += -DUSE_NGTCP2
    LDFLAGS += -L"$(NGTCP2_PATH)/lib"
    ifdef NGTCP2_LIBS
      LIBS += $(NGTCP2_LIBS)
    else
      LIBS += -lngtcp2
      ifdef SSL
        LIBS += -lngtcp2_crypto_openssl
      endif
    endif
  endif
endif
ifdef SSL
  ifndef OPENSSL_INCLUDE
    OPENSSL_INCLUDE := $(OPENSSL_PATH)/include
  endif
  ifndef OPENSSL_LIBPATH
    OPENSSL_LIBPATH := $(OPENSSL_PATH)/lib
    OPENSSL_LIBS := -lssl -lcrypto
  endif
  CPPFLAGS += -DUSE_OPENSSL
  CPPFLAGS += -I"$(OPENSSL_INCLUDE)"
  LDFLAGS += -L"$(OPENSSL_LIBPATH)"
  LIBS += $(OPENSSL_LIBS)
endif
ifdef SCHANNEL
  CPPFLAGS += -DUSE_SCHANNEL
endif
ifdef ZLIB
  CPPFLAGS += -DHAVE_LIBZ -DHAVE_ZLIB_H
  CPPFLAGS += -I"$(ZLIB_PATH)"
  LDFLAGS += -L"$(ZLIB_PATH)"
  LIBS += -lz
endif
ifdef ZSTD
  CPPFLAGS += -DHAVE_ZSTD
  CPPFLAGS += -I"$(ZSTD_PATH)/include"
  LDFLAGS += -L"$(ZSTD_PATH)/lib"
  ifdef ZSTD_LIBS
    LIBS += $(ZSTD_LIBS)
  else
    LIBS += -lzstd
  endif
endif
ifdef BROTLI
  CPPFLAGS += -DHAVE_BROTLI
  CPPFLAGS += -I"$(BROTLI_PATH)/include"
  LDFLAGS += -L"$(BROTLI_PATH)/lib"
  ifdef BROTLI_LIBS
    LIBS += $(BROTLI_LIBS)
  else
    LIBS += -lbrotlidec
  endif
endif
ifdef GSASL
  CPPFLAGS += -DUSE_GSASL
  LDFLAGS += -L"$(LIBGSASL_PATH)/lib"
  LIBS += -lgsasl
endif
ifdef IDN2
  CPPFLAGS += -DUSE_LIBIDN2
  LDFLAGS += -L"$(LIBIDN2_PATH)/lib"
  LIBS += -lidn2
else
ifdef WINIDN
  CPPFLAGS += -DUSE_WIN32_IDN
  LIBS += -lnormaliz
endif
endif
ifdef SSPI
  CPPFLAGS += -DUSE_WINDOWS_SSPI
endif
ifdef IPV6
  CPPFLAGS += -DENABLE_IPV6
endif
ifdef LDAPS
  CPPFLAGS += -DHAVE_LDAP_SSL
endif
ifeq ($(findstring -lldap,$(LDFLAGS)),)
  LIBS += -lwldap32
endif
LIBS += -lws2_32 -lcrypt32 -lbcrypt

# Makefile.inc provides the CURL_CFILES and CURLX_CFILES defines
include Makefile.inc

TARGETS := curl.exe
curl_OBJECTS := $(patsubst %.c,%.o,$(strip $(CURL_CFILES)))
curl_OBJECTS += $(patsubst %.c,%.o,$(notdir $(strip $(CURLX_CFILES))))
vpath %.c $(PROOT)/lib

RESOURCE := curl.res


all: $(TARGETS)

curl.exe: $(curl_OBJECTS) $(RESOURCE) $(curl_DEPENDENCIES)
	@$(call DEL, $@)
	$(CC) $(LDFLAGS) -o $@ $(curl_OBJECTS) $(RESOURCE) $(LIBS)

%.o: %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $<

%.res: %.rc
	$(RC) $(RCFLAGS) -i $< -o $@

clean:
	@$(call DEL, $(curl_OBJECTS) $(RESOURCE))

distclean vclean: clean
	@$(call DEL, $(TARGETS))
