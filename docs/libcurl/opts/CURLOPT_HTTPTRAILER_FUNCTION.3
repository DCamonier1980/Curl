.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2017, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://curl.haxx.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CURLOPT_HTTPTRAILER_FUNCTION 3 "14 Aug 2018" "libcurl 7.61.0" "curl_easy_setopt options"

.SH NAME:
CURLOPT_HTTPTRAILER_FUNCTION \- Callback to fill trailing headers list.
		
.SH SYNOPSIS:
#include <curl.h>

int curl_trailer_callback(struct curl_slist ** list, void *userdata); 

CURLcode curl_easy_setopt(CURL *handle, CURLOPT_HTTPTRAILER_FUNCTION, curl_trailer_callback *func);

.SH DESCRIPTION:
Pass a pointer to a callback function.

This callback function will be called right before sending the final CR LF 
in an HTTP transfer to fill a list of trailing headers to be sent before finishing the
HTTP transfer.

The callback must return the number of traling headers put in the list.
Set the userdata argument with the CURLOPT_HTTPTRAILER_DATA option.

The trailing headers included in the linked list must not be CRLF-terminated, because libcurl
adds CRLF after each header item.

You are responsible for freeing the allocated bytes to hold the trailing headers. You must keep
the bytes until the end of the request.

If you set this option to NULL, then the HTTP transfer procedes as usual without
interruptions.

.SH DEFAULT:
NULL

.SH PROTOCOLS:
HTTP

.SH EXAMPLE:
#include <curl/curl.h>

static size_t trailer_cb(struct curl_slist **tr, void *data){
	*tr = curl_slist_append(*tr, "My-super-awesome-trailer: trailer-stuff");
	(void)data;
	return 1;
}

CURL *curl = curl_easy_init();
if(curl) {

    /* Set the URL of the request */
    curl_easy_setopt(curl, CURLOPT_URL, "http://example.com/");
    /* Now set it as a post */ 
    curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);
    
    /* Assuming we have a function that will return the data to be pushed 
       Let that function be read_cb */
    curl_easy_setopt(curl, CURLOPT_READFUNCTION, read_cb);

    /* We need to announce the trailers to come 
       See CURLOPT_READFUNCTION for more on the matter */
    struct curl_slist *chunk = NULL;
    chunk = curl_slist_append(chunk, "Trailer: My-super-awsome-trailer");
    res = curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);

    /* Set the trailers filling callback */
    curl_easy_setopt(curl, CURLOPT_HTTPTRAILER_FUNCTION, (curl_trailer_callback)trailer_cb);

    /* Perform the request, res will get the return code */ 
    res = curl_easy_perform(curl);
}


.SH AVAILABILITY:
???

.SH RETURN VALUE
The number of trailing headers added to the list

.SH "SEE ALSO"
.BR CURLOPT_HTTPTRAILER_DATA "(3), " 
