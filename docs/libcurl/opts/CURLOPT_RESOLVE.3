.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2014, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at http://curl.haxx.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CURLOPT_RESOLVE 3 "19 Jun 2014" "libcurl 7.37.0" "curl_easy_setopt options"
.SH NAME
CURLOPT_RESOLVE \- provide custom host name to IP address resolves
.SH SYNOPSIS
.nf
#include <curl/curl.h>

CURLcode curl_easy_setopt(CURL *handle, CURLOPT_RESOLVE,
                          struct curl_slist *hosts);
.SH DESCRIPTION
Pass a pointer to a linked list of strings with host name resolve information
to use for requests with this handle. The linked list should be a fully valid
list of \fBstruct curl_slist\fP structs properly filled in. Use
\fIcurl_slist_append(3)\fP to create the list and \fIcurl_slist_free_all(3)\fP
to clean up an entire list.

Each single name resolve string should be written using the format
HOST:PORT:ADDRESS where HOST is the name libcurl will try to resolve, PORT is
the port number of the service where libcurl wants to connect to the HOST and
ADDRESS is the numerical IP address. If libcurl is built to support IPv6,
ADDRESS can of course be either IPv4 or IPv6 style addressing.

This option effectively pre-populates a DNS cache with entries for the
HOST:PORT pair so all operations against the HOST:PORT will instead use your
provided ADDRESSes. Addresses added with \fICURLOPT_RESOLVE\fP will not
time-out from a DNS cache like ordinary entries.

Starting in 7.42.0 it is possible to remove a DNS cache entry or any of its
addresses, regardless of if they were added by \fICURLOPT_RESOLVE\fP, by
prefixing with a dash. To remove an individual address use the format
\fB-\fPHOST:PORT:ADDRESS. To remove an entry entirely use the format
\fB-\fPHOST:PORT.
.SH "IMPORTANT BEHAVIOR DETAILS"
When you add an address any non-user-specified addresses (ie addresses
provided by the resolver) already in the cache entry for HOST:PORT are
removed. The cache entry is then marked as user specified and the cache entry
does not time out.

In contrast to above when you remove an address only that address is removed
regardless of how it came to be cached. The cache entry is not marked as user
specified and retains its previously assigned behavior. If a cache entry is
user-specified it does not time out, if not user-specified it may time out.

If you try to add/remove to HOST:PORT and the existing cache entry is actively
in use it is not modified and instead a copy is made, modified and replaces
the existing entry in the cache immediately. The old entry is still held and
used by whatever is using it and will be deleted once no longer in use. That
can lead to some unexpected behavior. Consider the following:

- You have one easy handle.
- You call curl_easy_perform on handle.
- The URL's host:port is resolved normally (addresses provided by resolver).
- A connection is made to the host:port and a resource is retrieved.
- The connection is left open to host:port.
- You use CURLOPT_RESOLVE on handle to change addresses for host:port.
- You call curl_easy_perform on handle again.
- The open connection is reused.

If the connection had died, connection reuse was disabled or a fresh
connection was specified then your modified DNS cache entry for host:port
would have been used to make the new connection.

\fBlibcurl handles multiple DNS caches.\fP \fICURLOPT_RESOLVE\fP only modifies
a single DNS cache, the one associated with your handle. By default each easy
handle has its own DNS cache, unless the easy handle is part of a multi handle
in which case it uses a DNS cache shared by all easy handles in the multi
handle. Alternatively you can create your own DNS cache and share it between
handles by using creating a shared object of type \fICURL_LOCK_DATA_DNS\fP.
Refer to \fIlibcurl-share(3)\fP for more information on shared objects.
.SH DEFAULT
NULL
.SH PROTOCOLS
All
.SH EXAMPLE
.nf
CURL *curl;
struct curl_slist *host = NULL;
host = curl_slist_append(NULL, "example.com:80:127.0.0.1");

curl = curl_easy_init();
if(curl) {
  curl_easy_setopt(curl, CURLOPT_RESOLVE, host);
  curl_easy_setopt(curl, CURLOPT_URL, "http://example.com");
  res = curl_easy_perform(curl);

  /* always cleanup */
  curl_easy_cleanup(curl);
}

curl_slist_free_all(host);
.fi
.SH AVAILABILITY
Added in 7.21.3
.SH RETURN VALUE
Returns CURLE_OK if the option is supported, and CURLE_UNKNOWN_OPTION if not.
.SH "SEE ALSO"
.BR CURLOPT_IPRESOLVE "(3), " CURLOPT_DNS_CACHE_TIMEOUT "(3), "
