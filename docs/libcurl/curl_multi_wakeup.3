.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://curl.haxx.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.TH curl_multi_wakeup 3 "17 Nov 2019" "libcurl 7.68.0" "libcurl Manual"
.SH NAME
curl_multi_wakeup - wakes up a sleeping curl_multi_poll call
.SH SYNOPSIS
#include <curl/curl.h>

CURLMcode curl_multi_wakeup(CURLM *multi_handle);
.ad
.SH DESCRIPTION
This function can be called from any thread and it wakes up a sleeping
\fIcurl_multi_poll(3)\fP call that is currently (or will be) waiting for
activity or a timeout.

Warning: \fBlibcurl has no internal thread synchronization.\fP This function
can be called on a multi handle in use by another thread so long as you have
synchronized with curl_multi_init and curl_multi_cleanup, such that it is only
called in between. Typically a synchronization object could be used to ensure
this, since those routines set memory barriers. Refer to the EXAMPLE.

If the function is called when there is no \fIcurl_multi_poll(3)\fP call,
it will cause the next call to return immediately.

Calling this function only guarantees to wake up the current (or the next
if there is no current) \fIcurl_multi_poll(3)\fP call, which means it is
possible that multiple calls to this function will wake up the same waiting
operation.

This function has no effect on \fIcurl_multi_wait(3)\fP calls.

The wakeup feature may be disabled for a multi via
\fIcurl_multi_init_advanced(3)\fP. If the wakeup feature is disabled then this
function will return an error.
.SH RETURN VALUE
CURLMcode type, general libcurl multi interface error code.
.SH AVAILABILITY
Added in 7.68.0
.SH EXAMPLE
.nf
/*
 * this is thread 1
 */
CURL *easy_handle = curl_easy_init();
CURLM *multi_handle = curl_multi_init();

/* expose shared multi pointer with synchronization */
Lock(shared->mutex);
shared->multi = multi_handle;
Unlock(shared->mutex);

/* add the individual easy handle */
curl_multi_add_handle(multi_handle, easy_handle);

do {
  CURLMcode mc;
  int numfds;

  Lock(shared->mutex);
  if(shared->bye)
    break;
  Unlock(shared->mutex);

  mc = curl_multi_perform(multi_handle, &still_running);

  if(mc == CURLM_OK) {
    /* wait for activity, timeout or wakeup */
    mc = curl_multi_poll(multi_handle, NULL, 0, 10000, &numfds);
  }
} while(still_running);

curl_multi_remove_handle(multi_handle, easy_handle);

Lock(shared->mutex);
shared->multi = NULL;
Unlock(shared->mutex);

/* cleanup occurs AFTER synchronization */
curl_multi_cleanup(multi_handle);

exit_thread();

/* 
 * this is thread 2
 */

if(something makes us decide to stop thread 1) {

  Lock(shared->mutex);
  if(shared->multi)
    curl_multi_wakeup(shared->multi);
  shared->bye = true;
  Unock(shared->mutex);

  exit_thread();
}

.fi
.SH "SEE ALSO"
.BR curl_multi_poll "(3)," curl_multi_init_advanced "(3), "
.BR curl_multi_wait "(3)," libcurl-thread "(3)"
